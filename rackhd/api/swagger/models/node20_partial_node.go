package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Node20PartialNode Post a node in RackHD
// swagger:model node.2.0_PartialNode
type Node20PartialNode struct {

	// auto discover
	AutoDiscover string `json:"autoDiscover,omitempty"`

	// Name of the node
	Name string `json:"name,omitempty"`

	// Type of node
	Type string `json:"type,omitempty"`
}

// Validate validates this node 2 0 partial node
func (m *Node20PartialNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var node20PartialNodeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["compute","switch","dae","pdu","mgmt","enclosure","rack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		node20PartialNodeTypeTypePropEnum = append(node20PartialNodeTypeTypePropEnum, v)
	}
}

const (
	node20PartialNodeTypeCompute   string = "compute"
	node20PartialNodeTypeSwitch    string = "switch"
	node20PartialNodeTypeDae       string = "dae"
	node20PartialNodeTypePdu       string = "pdu"
	node20PartialNodeTypeMgmt      string = "mgmt"
	node20PartialNodeTypeEnclosure string = "enclosure"
	node20PartialNodeTypeRack      string = "rack"
)

// prop value enum
func (m *Node20PartialNode) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, node20PartialNodeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Node20PartialNode) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
