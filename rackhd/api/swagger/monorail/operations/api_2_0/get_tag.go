package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTagHandlerFunc turns a function with the right signature into a get tag handler
type GetTagHandlerFunc func(context.Context, GetTagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTagHandlerFunc) Handle(ctx context.Context, params GetTagParams) middleware.Responder {
	return fn(ctx, params)
}

// GetTagHandler interface for that can handle valid get tag params
type GetTagHandler interface {
	Handle(context.Context, GetTagParams) middleware.Responder
}

// NewGetTag creates a new http.Handler for the get tag operation
func NewGetTag(ctx *middleware.Context, handler GetTagHandler) *GetTag {
	return &GetTag{Context: ctx, Handler: handler}
}

/*GetTag swagger:route GET /tags/{tagName} /api/2.0 getTag

Get a tag

Get the data associated with the specified tag.

*/
type GetTag struct {
	Context *middleware.Context
	Handler GetTagHandler
}

func (o *GetTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetTagParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTagOKBody get tag o k body
// swagger:model GetTagOKBody
type GetTagOKBody interface{}
