package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserHandlerFunc turns a function with the right signature into a get user handler
type GetUserHandlerFunc func(context.Context, GetUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserHandlerFunc) Handle(ctx context.Context, params GetUserParams) middleware.Responder {
	return fn(ctx, params)
}

// GetUserHandler interface for that can handle valid get user params
type GetUserHandler interface {
	Handle(context.Context, GetUserParams) middleware.Responder
}

// NewGetUser creates a new http.Handler for the get user operation
func NewGetUser(ctx *middleware.Context, handler GetUserHandler) *GetUser {
	return &GetUser{Context: ctx, Handler: handler}
}

/*GetUser swagger:route GET /users/{name} /api/2.0 getUser

Get the specified user

Get information about the specified user.

*/
type GetUser struct {
	Context *middleware.Context
	Handler GetUserHandler
}

func (o *GetUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetUserUnauthorizedBody get user unauthorized body
// swagger:model GetUserUnauthorizedBody
type GetUserUnauthorizedBody interface{}

// GetUserForbiddenBody get user forbidden body
// swagger:model GetUserForbiddenBody
type GetUserForbiddenBody interface{}
