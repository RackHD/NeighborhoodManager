package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"

	"github.com/go-openapi/swag"
)

// ProfilesGetURL generates an URL for the profiles get operation
type ProfilesGetURL struct {
	IP   *string
	Ips  []string
	Mac  *string
	Macs []string

	// avoid unkeyed usage
	_ struct{}
}

// Build a url path and query string
func (o *ProfilesGetURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/profiles"

	result.Path = _path

	qs := make(url.Values)

	var ip string
	if o.IP != nil {
		ip = *o.IP
	}
	if ip != "" {
		qs.Set("ip", ip)
	}

	var ipsIR []string
	for _, ipsI := range o.Ips {
		ipsIS := ipsI
		if ipsIS != "" {
			ipsIR = append(ipsIR, ipsIS)
		}
	}

	ips := swag.JoinByFormat(ipsIR, "multi")

	for _, qsv := range ips {
		qs.Add("ips", qsv)
	}

	var mac string
	if o.Mac != nil {
		mac = *o.Mac
	}
	if mac != "" {
		qs.Set("mac", mac)
	}

	var macsIR []string
	for _, macsI := range o.Macs {
		macsIS := macsI
		if macsIS != "" {
			macsIR = append(macsIR, macsIS)
		}
	}

	macs := swag.JoinByFormat(macsIR, "multi")

	for _, qsv := range macs {
		qs.Add("macs", qsv)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *ProfilesGetURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *ProfilesGetURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *ProfilesGetURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on ProfilesGetURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on ProfilesGetURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *ProfilesGetURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
