package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TaskSchemasIDGetHandlerFunc turns a function with the right signature into a task schemas Id get handler
type TaskSchemasIDGetHandlerFunc func(context.Context, TaskSchemasIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TaskSchemasIDGetHandlerFunc) Handle(ctx context.Context, params TaskSchemasIDGetParams) middleware.Responder {
	return fn(ctx, params)
}

// TaskSchemasIDGetHandler interface for that can handle valid task schemas Id get params
type TaskSchemasIDGetHandler interface {
	Handle(context.Context, TaskSchemasIDGetParams) middleware.Responder
}

// NewTaskSchemasIDGet creates a new http.Handler for the task schemas Id get operation
func NewTaskSchemasIDGet(ctx *middleware.Context, handler TaskSchemasIDGetHandler) *TaskSchemasIDGet {
	return &TaskSchemasIDGet{Context: ctx, Handler: handler}
}

/*TaskSchemasIDGet swagger:route GET /schemas/tasks/{identifier} /api/2.0 taskSchemasIdGet

Get a task schema

Get the specified task schema.

*/
type TaskSchemasIDGet struct {
	Context *middleware.Context
	Handler TaskSchemasIDGetHandler
}

func (o *TaskSchemasIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTaskSchemasIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TaskSchemasIDGetOKBody task schemas ID get o k body
// swagger:model TaskSchemasIDGetOKBody
type TaskSchemasIDGetOKBody interface{}
