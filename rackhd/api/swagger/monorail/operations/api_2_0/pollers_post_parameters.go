package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

// NewPollersPostParams creates a new PollersPostParams object
// with the default values initialized.
func NewPollersPostParams() PollersPostParams {
	var ()
	return PollersPostParams{}
}

// PollersPostParams contains all the bound params for the pollers post operation
// typically these are obtained from a http.Request
//
// swagger:parameters pollersPost
type PollersPostParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The request body must contain the necessary information to create the poller, including type, pollInterval, and command. The node identifier must also be included if the poller is to be associated with a node.

	  Required: true
	  In: body
	*/
	Content *models.Poller20PartialPoller
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *PollersPostParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Poller20PartialPoller
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("content", "body"))
			} else {
				res = append(res, errors.NewParseError("content", "body", "", err))
			}

		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Content = &body
			}
		}

	} else {
		res = append(res, errors.Required("content", "body"))
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
