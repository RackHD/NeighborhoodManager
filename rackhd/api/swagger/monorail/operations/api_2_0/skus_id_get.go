package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SkusIDGetHandlerFunc turns a function with the right signature into a skus Id get handler
type SkusIDGetHandlerFunc func(context.Context, SkusIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SkusIDGetHandlerFunc) Handle(ctx context.Context, params SkusIDGetParams) middleware.Responder {
	return fn(ctx, params)
}

// SkusIDGetHandler interface for that can handle valid skus Id get params
type SkusIDGetHandler interface {
	Handle(context.Context, SkusIDGetParams) middleware.Responder
}

// NewSkusIDGet creates a new http.Handler for the skus Id get operation
func NewSkusIDGet(ctx *middleware.Context, handler SkusIDGetHandler) *SkusIDGet {
	return &SkusIDGet{Context: ctx, Handler: handler}
}

/*SkusIDGet swagger:route GET /skus/{identifier} /api/2.0 skusIdGet

Get the specified SKU

Get the SKU with the specified identifier.

*/
type SkusIDGet struct {
	Context *middleware.Context
	Handler SkusIDGetHandler
}

func (o *SkusIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewSkusIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SkusIDGetOKBody skus ID get o k body
// swagger:model SkusIDGetOKBody
type SkusIDGetOKBody interface{}
