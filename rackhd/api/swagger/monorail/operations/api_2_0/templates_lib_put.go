package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TemplatesLibPutHandlerFunc turns a function with the right signature into a templates lib put handler
type TemplatesLibPutHandlerFunc func(context.Context, TemplatesLibPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TemplatesLibPutHandlerFunc) Handle(ctx context.Context, params TemplatesLibPutParams) middleware.Responder {
	return fn(ctx, params)
}

// TemplatesLibPutHandler interface for that can handle valid templates lib put params
type TemplatesLibPutHandler interface {
	Handle(context.Context, TemplatesLibPutParams) middleware.Responder
}

// NewTemplatesLibPut creates a new http.Handler for the templates lib put operation
func NewTemplatesLibPut(ctx *middleware.Context, handler TemplatesLibPutHandler) *TemplatesLibPut {
	return &TemplatesLibPut{Context: ctx, Handler: handler}
}

/*TemplatesLibPut swagger:route PUT /templates/library/{name} /api/2.0 templatesLibPut

Create or update the specified template

Create or update the metadata and the content of the specified template.

*/
type TemplatesLibPut struct {
	Context *middleware.Context
	Handler TemplatesLibPutHandler
}

func (o *TemplatesLibPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTemplatesLibPutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TemplatesLibPutCreatedBody templates lib put created body
// swagger:model TemplatesLibPutCreatedBody
type TemplatesLibPutCreatedBody interface{}
