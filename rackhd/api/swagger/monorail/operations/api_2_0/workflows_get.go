package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WorkflowsGetHandlerFunc turns a function with the right signature into a workflows get handler
type WorkflowsGetHandlerFunc func(context.Context, WorkflowsGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WorkflowsGetHandlerFunc) Handle(ctx context.Context, params WorkflowsGetParams) middleware.Responder {
	return fn(ctx, params)
}

// WorkflowsGetHandler interface for that can handle valid workflows get params
type WorkflowsGetHandler interface {
	Handle(context.Context, WorkflowsGetParams) middleware.Responder
}

// NewWorkflowsGet creates a new http.Handler for the workflows get operation
func NewWorkflowsGet(ctx *middleware.Context, handler WorkflowsGetHandler) *WorkflowsGet {
	return &WorkflowsGet{Context: ctx, Handler: handler}
}

/*WorkflowsGet swagger:route GET /workflows /api/2.0 workflowsGet

Get a list of workflow instances

Get list workflow that have been run or are currently running.

*/
type WorkflowsGet struct {
	Context *middleware.Context
	Handler WorkflowsGetHandler
}

func (o *WorkflowsGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWorkflowsGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WorkflowsGetOKBody workflows get o k body
// swagger:model WorkflowsGetOKBody
type WorkflowsGetOKBody interface{}
