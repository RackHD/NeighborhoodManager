package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*RemoveRoleNoContent Successfully deleted the specified role

swagger:response removeRoleNoContent
*/
type RemoveRoleNoContent struct {
}

// NewRemoveRoleNoContent creates RemoveRoleNoContent with default headers values
func NewRemoveRoleNoContent() *RemoveRoleNoContent {
	return &RemoveRoleNoContent{}
}

// WriteResponse to the client
func (o *RemoveRoleNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*RemoveRoleUnauthorized Unauthorized

swagger:response removeRoleUnauthorized
*/
type RemoveRoleUnauthorized struct {

	// In: body
	Payload RemoveRoleUnauthorizedBody `json:"body,omitempty"`
}

// NewRemoveRoleUnauthorized creates RemoveRoleUnauthorized with default headers values
func NewRemoveRoleUnauthorized() *RemoveRoleUnauthorized {
	return &RemoveRoleUnauthorized{}
}

// WithPayload adds the payload to the remove role unauthorized response
func (o *RemoveRoleUnauthorized) WithPayload(payload RemoveRoleUnauthorizedBody) *RemoveRoleUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove role unauthorized response
func (o *RemoveRoleUnauthorized) SetPayload(payload RemoveRoleUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveRoleUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*RemoveRoleForbidden Forbidden

swagger:response removeRoleForbidden
*/
type RemoveRoleForbidden struct {

	// In: body
	Payload RemoveRoleForbiddenBody `json:"body,omitempty"`
}

// NewRemoveRoleForbidden creates RemoveRoleForbidden with default headers values
func NewRemoveRoleForbidden() *RemoveRoleForbidden {
	return &RemoveRoleForbidden{}
}

// WithPayload adds the payload to the remove role forbidden response
func (o *RemoveRoleForbidden) WithPayload(payload RemoveRoleForbiddenBody) *RemoveRoleForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove role forbidden response
func (o *RemoveRoleForbidden) SetPayload(payload RemoveRoleForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveRoleForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*RemoveRoleDefault Unexpected error

swagger:response removeRoleDefault
*/
type RemoveRoleDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveRoleDefault creates RemoveRoleDefault with default headers values
func NewRemoveRoleDefault(code int) *RemoveRoleDefault {
	if code <= 0 {
		code = 500
	}

	return &RemoveRoleDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the remove role default response
func (o *RemoveRoleDefault) WithStatusCode(code int) *RemoveRoleDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the remove role default response
func (o *RemoveRoleDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the remove role default response
func (o *RemoveRoleDefault) WithPayload(payload *models.Error) *RemoveRoleDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove role default response
func (o *RemoveRoleDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveRoleDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
