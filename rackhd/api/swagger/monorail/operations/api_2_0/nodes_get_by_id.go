package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesGetByIDHandlerFunc turns a function with the right signature into a nodes get by Id handler
type NodesGetByIDHandlerFunc func(context.Context, NodesGetByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesGetByIDHandlerFunc) Handle(ctx context.Context, params NodesGetByIDParams) middleware.Responder {
	return fn(ctx, params)
}

// NodesGetByIDHandler interface for that can handle valid nodes get by Id params
type NodesGetByIDHandler interface {
	Handle(context.Context, NodesGetByIDParams) middleware.Responder
}

// NewNodesGetByID creates a new http.Handler for the nodes get by Id operation
func NewNodesGetByID(ctx *middleware.Context, handler NodesGetByIDHandler) *NodesGetByID {
	return &NodesGetByID{Context: ctx, Handler: handler}
}

/*NodesGetByID swagger:route GET /nodes/{identifier} /api/2.0 nodesGetById

Get a node

Get all information on the specified node.

*/
type NodesGetByID struct {
	Context *middleware.Context
	Handler NodesGetByIDHandler
}

func (o *NodesGetByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesGetByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
