package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ViewsDeleteHandlerFunc turns a function with the right signature into a views delete handler
type ViewsDeleteHandlerFunc func(context.Context, ViewsDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ViewsDeleteHandlerFunc) Handle(ctx context.Context, params ViewsDeleteParams) middleware.Responder {
	return fn(ctx, params)
}

// ViewsDeleteHandler interface for that can handle valid views delete params
type ViewsDeleteHandler interface {
	Handle(context.Context, ViewsDeleteParams) middleware.Responder
}

// NewViewsDelete creates a new http.Handler for the views delete operation
func NewViewsDelete(ctx *middleware.Context, handler ViewsDeleteHandler) *ViewsDelete {
	return &ViewsDelete{Context: ctx, Handler: handler}
}

/*ViewsDelete swagger:route DELETE /views/{identifier} /api/2.0 viewsDelete

Delete the specified view

Delete a view with the specified name.

*/
type ViewsDelete struct {
	Context *middleware.Context
	Handler ViewsDeleteHandler
}

func (o *ViewsDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewViewsDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ViewsDeleteNoContentBody views delete no content body
// swagger:model ViewsDeleteNoContentBody
type ViewsDeleteNoContentBody interface{}
