package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*AddUserCreated Successfully created the user

swagger:response addUserCreated
*/
type AddUserCreated struct {

	// In: body
	Payload AddUserCreatedBody `json:"body,omitempty"`
}

// NewAddUserCreated creates AddUserCreated with default headers values
func NewAddUserCreated() *AddUserCreated {
	return &AddUserCreated{}
}

// WithPayload adds the payload to the add user created response
func (o *AddUserCreated) WithPayload(payload AddUserCreatedBody) *AddUserCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add user created response
func (o *AddUserCreated) SetPayload(payload AddUserCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddUserCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*AddUserUnauthorized Unauthorized

swagger:response addUserUnauthorized
*/
type AddUserUnauthorized struct {

	// In: body
	Payload AddUserUnauthorizedBody `json:"body,omitempty"`
}

// NewAddUserUnauthorized creates AddUserUnauthorized with default headers values
func NewAddUserUnauthorized() *AddUserUnauthorized {
	return &AddUserUnauthorized{}
}

// WithPayload adds the payload to the add user unauthorized response
func (o *AddUserUnauthorized) WithPayload(payload AddUserUnauthorizedBody) *AddUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add user unauthorized response
func (o *AddUserUnauthorized) SetPayload(payload AddUserUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*AddUserForbidden Forbidden

swagger:response addUserForbidden
*/
type AddUserForbidden struct {

	// In: body
	Payload AddUserForbiddenBody `json:"body,omitempty"`
}

// NewAddUserForbidden creates AddUserForbidden with default headers values
func NewAddUserForbidden() *AddUserForbidden {
	return &AddUserForbidden{}
}

// WithPayload adds the payload to the add user forbidden response
func (o *AddUserForbidden) WithPayload(payload AddUserForbiddenBody) *AddUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add user forbidden response
func (o *AddUserForbidden) SetPayload(payload AddUserForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*AddUserDefault Unexpected error

swagger:response addUserDefault
*/
type AddUserDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddUserDefault creates AddUserDefault with default headers values
func NewAddUserDefault(code int) *AddUserDefault {
	if code <= 0 {
		code = 500
	}

	return &AddUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add user default response
func (o *AddUserDefault) WithStatusCode(code int) *AddUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add user default response
func (o *AddUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add user default response
func (o *AddUserDefault) WithPayload(payload *models.Error) *AddUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add user default response
func (o *AddUserDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
