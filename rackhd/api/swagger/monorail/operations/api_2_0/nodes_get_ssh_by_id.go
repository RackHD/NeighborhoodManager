package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesGetSSHByIDHandlerFunc turns a function with the right signature into a nodes get Ssh by Id handler
type NodesGetSSHByIDHandlerFunc func(context.Context, NodesGetSSHByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesGetSSHByIDHandlerFunc) Handle(ctx context.Context, params NodesGetSSHByIDParams) middleware.Responder {
	return fn(ctx, params)
}

// NodesGetSSHByIDHandler interface for that can handle valid nodes get Ssh by Id params
type NodesGetSSHByIDHandler interface {
	Handle(context.Context, NodesGetSSHByIDParams) middleware.Responder
}

// NewNodesGetSSHByID creates a new http.Handler for the nodes get Ssh by Id operation
func NewNodesGetSSHByID(ctx *middleware.Context, handler NodesGetSSHByIDHandler) *NodesGetSSHByID {
	return &NodesGetSSHByID{Context: ctx, Handler: handler}
}

/*NodesGetSSHByID swagger:route GET /nodes/{identifier}/ssh /api/2.0 nodesGetSshById

Get the ssh settings for a node

Get all of the ssh settings associated with the specified node.

*/
type NodesGetSSHByID struct {
	Context *middleware.Context
	Handler NodesGetSSHByIDHandler
}

func (o *NodesGetSSHByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesGetSSHByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// NodesGetSSHByIDOKBody nodes get SSH by ID o k body
// swagger:model NodesGetSSHByIDOKBody
type NodesGetSSHByIDOKBody interface{}
