package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ObmsGetByIDHandlerFunc turns a function with the right signature into a obms get by Id handler
type ObmsGetByIDHandlerFunc func(context.Context, ObmsGetByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ObmsGetByIDHandlerFunc) Handle(ctx context.Context, params ObmsGetByIDParams) middleware.Responder {
	return fn(ctx, params)
}

// ObmsGetByIDHandler interface for that can handle valid obms get by Id params
type ObmsGetByIDHandler interface {
	Handle(context.Context, ObmsGetByIDParams) middleware.Responder
}

// NewObmsGetByID creates a new http.Handler for the obms get by Id operation
func NewObmsGetByID(ctx *middleware.Context, handler ObmsGetByIDHandler) *ObmsGetByID {
	return &ObmsGetByID{Context: ctx, Handler: handler}
}

/*ObmsGetByID swagger:route GET /obms/{identifier} /api/2.0 obmsGetById

Get an OBM service

Get the OBM settings associated with the specified identifier

*/
type ObmsGetByID struct {
	Context *middleware.Context
	Handler ObmsGetByIDHandler
}

func (o *ObmsGetByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewObmsGetByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ObmsGetByIDOKBody obms get by ID o k body
// swagger:model ObmsGetByIDOKBody
type ObmsGetByIDOKBody interface{}
