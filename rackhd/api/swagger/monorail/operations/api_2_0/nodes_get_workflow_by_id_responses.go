package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*NodesGetWorkflowByIDOK Successfully retrieved the workflows for specified node

swagger:response nodesGetWorkflowByIdOK
*/
type NodesGetWorkflowByIDOK struct {

	// In: body
	Payload NodesGetWorkflowByIDOKBody `json:"body,omitempty"`
}

// NewNodesGetWorkflowByIDOK creates NodesGetWorkflowByIDOK with default headers values
func NewNodesGetWorkflowByIDOK() *NodesGetWorkflowByIDOK {
	return &NodesGetWorkflowByIDOK{}
}

// WithPayload adds the payload to the nodes get workflow by Id o k response
func (o *NodesGetWorkflowByIDOK) WithPayload(payload NodesGetWorkflowByIDOKBody) *NodesGetWorkflowByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes get workflow by Id o k response
func (o *NodesGetWorkflowByIDOK) SetPayload(payload NodesGetWorkflowByIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesGetWorkflowByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*NodesGetWorkflowByIDNotFound The specified node was not found.

swagger:response nodesGetWorkflowByIdNotFound
*/
type NodesGetWorkflowByIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesGetWorkflowByIDNotFound creates NodesGetWorkflowByIDNotFound with default headers values
func NewNodesGetWorkflowByIDNotFound() *NodesGetWorkflowByIDNotFound {
	return &NodesGetWorkflowByIDNotFound{}
}

// WithPayload adds the payload to the nodes get workflow by Id not found response
func (o *NodesGetWorkflowByIDNotFound) WithPayload(payload *models.Error) *NodesGetWorkflowByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes get workflow by Id not found response
func (o *NodesGetWorkflowByIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesGetWorkflowByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*NodesGetWorkflowByIDDefault Unexpected error

swagger:response nodesGetWorkflowByIdDefault
*/
type NodesGetWorkflowByIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesGetWorkflowByIDDefault creates NodesGetWorkflowByIDDefault with default headers values
func NewNodesGetWorkflowByIDDefault(code int) *NodesGetWorkflowByIDDefault {
	if code <= 0 {
		code = 500
	}

	return &NodesGetWorkflowByIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the nodes get workflow by Id default response
func (o *NodesGetWorkflowByIDDefault) WithStatusCode(code int) *NodesGetWorkflowByIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the nodes get workflow by Id default response
func (o *NodesGetWorkflowByIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the nodes get workflow by Id default response
func (o *NodesGetWorkflowByIDDefault) WithPayload(payload *models.Error) *NodesGetWorkflowByIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes get workflow by Id default response
func (o *NodesGetWorkflowByIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesGetWorkflowByIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
