package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WorkflowsGetGraphsHandlerFunc turns a function with the right signature into a workflows get graphs handler
type WorkflowsGetGraphsHandlerFunc func(context.Context, WorkflowsGetGraphsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WorkflowsGetGraphsHandlerFunc) Handle(ctx context.Context, params WorkflowsGetGraphsParams) middleware.Responder {
	return fn(ctx, params)
}

// WorkflowsGetGraphsHandler interface for that can handle valid workflows get graphs params
type WorkflowsGetGraphsHandler interface {
	Handle(context.Context, WorkflowsGetGraphsParams) middleware.Responder
}

// NewWorkflowsGetGraphs creates a new http.Handler for the workflows get graphs operation
func NewWorkflowsGetGraphs(ctx *middleware.Context, handler WorkflowsGetGraphsHandler) *WorkflowsGetGraphs {
	return &WorkflowsGetGraphs{Context: ctx, Handler: handler}
}

/*WorkflowsGetGraphs swagger:route GET /workflows/graphs /api/2.0 workflowsGetGraphs

Get list of workflow graphs

Get a list of all workflow graphs available to run.

*/
type WorkflowsGetGraphs struct {
	Context *middleware.Context
	Handler WorkflowsGetGraphsHandler
}

func (o *WorkflowsGetGraphs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWorkflowsGetGraphsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WorkflowsGetGraphsOKBody workflows get graphs o k body
// swagger:model WorkflowsGetGraphsOKBody
type WorkflowsGetGraphsOKBody interface{}
