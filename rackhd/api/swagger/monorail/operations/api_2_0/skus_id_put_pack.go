package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SkusIDPutPackHandlerFunc turns a function with the right signature into a skus Id put pack handler
type SkusIDPutPackHandlerFunc func(context.Context, SkusIDPutPackParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SkusIDPutPackHandlerFunc) Handle(ctx context.Context, params SkusIDPutPackParams) middleware.Responder {
	return fn(ctx, params)
}

// SkusIDPutPackHandler interface for that can handle valid skus Id put pack params
type SkusIDPutPackHandler interface {
	Handle(context.Context, SkusIDPutPackParams) middleware.Responder
}

// NewSkusIDPutPack creates a new http.Handler for the skus Id put pack operation
func NewSkusIDPutPack(ctx *middleware.Context, handler SkusIDPutPackHandler) *SkusIDPutPack {
	return &SkusIDPutPack{Context: ctx, Handler: handler}
}

/*SkusIDPutPack swagger:route PUT /skus/{identifier}/pack /api/2.0 skusIdPutPack

Put a SKU Pack to the specified SKU

Create or modify a SKU Pack, and associate the SKU Pack with the specified SKU.

*/
type SkusIDPutPack struct {
	Context *middleware.Context
	Handler SkusIDPutPackHandler
}

func (o *SkusIDPutPack) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewSkusIDPutPackParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SkusIDPutPackCreatedBody skus ID put pack created body
// swagger:model SkusIDPutPackCreatedBody
type SkusIDPutPackCreatedBody interface{}
