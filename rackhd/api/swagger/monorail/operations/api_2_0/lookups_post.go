package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LookupsPostHandlerFunc turns a function with the right signature into a lookups post handler
type LookupsPostHandlerFunc func(context.Context, LookupsPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LookupsPostHandlerFunc) Handle(ctx context.Context, params LookupsPostParams) middleware.Responder {
	return fn(ctx, params)
}

// LookupsPostHandler interface for that can handle valid lookups post params
type LookupsPostHandler interface {
	Handle(context.Context, LookupsPostParams) middleware.Responder
}

// NewLookupsPost creates a new http.Handler for the lookups post operation
func NewLookupsPost(ctx *middleware.Context, handler LookupsPostHandler) *LookupsPost {
	return &LookupsPost{Context: ctx, Handler: handler}
}

/*LookupsPost swagger:route POST /lookups /api/2.0 lookupsPost

Post a lookup

Create and store a new lookup.

*/
type LookupsPost struct {
	Context *middleware.Context
	Handler LookupsPostHandler
}

func (o *LookupsPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLookupsPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// LookupsPostCreatedBody lookups post created body
// swagger:model LookupsPostCreatedBody
type LookupsPostCreatedBody interface{}
