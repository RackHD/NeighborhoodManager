package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*ProfilesPutLibByNameCreated Successfully created or modified the specified profile

swagger:response profilesPutLibByNameCreated
*/
type ProfilesPutLibByNameCreated struct {

	// In: body
	Payload ProfilesPutLibByNameCreatedBody `json:"body,omitempty"`
}

// NewProfilesPutLibByNameCreated creates ProfilesPutLibByNameCreated with default headers values
func NewProfilesPutLibByNameCreated() *ProfilesPutLibByNameCreated {
	return &ProfilesPutLibByNameCreated{}
}

// WithPayload adds the payload to the profiles put lib by name created response
func (o *ProfilesPutLibByNameCreated) WithPayload(payload ProfilesPutLibByNameCreatedBody) *ProfilesPutLibByNameCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles put lib by name created response
func (o *ProfilesPutLibByNameCreated) SetPayload(payload ProfilesPutLibByNameCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesPutLibByNameCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ProfilesPutLibByNameInternalServerError Profile creation failed

swagger:response profilesPutLibByNameInternalServerError
*/
type ProfilesPutLibByNameInternalServerError struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewProfilesPutLibByNameInternalServerError creates ProfilesPutLibByNameInternalServerError with default headers values
func NewProfilesPutLibByNameInternalServerError() *ProfilesPutLibByNameInternalServerError {
	return &ProfilesPutLibByNameInternalServerError{}
}

// WithPayload adds the payload to the profiles put lib by name internal server error response
func (o *ProfilesPutLibByNameInternalServerError) WithPayload(payload *models.Error) *ProfilesPutLibByNameInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles put lib by name internal server error response
func (o *ProfilesPutLibByNameInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesPutLibByNameInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ProfilesPutLibByNameDefault Unexpected error

swagger:response profilesPutLibByNameDefault
*/
type ProfilesPutLibByNameDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewProfilesPutLibByNameDefault creates ProfilesPutLibByNameDefault with default headers values
func NewProfilesPutLibByNameDefault(code int) *ProfilesPutLibByNameDefault {
	if code <= 0 {
		code = 500
	}

	return &ProfilesPutLibByNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the profiles put lib by name default response
func (o *ProfilesPutLibByNameDefault) WithStatusCode(code int) *ProfilesPutLibByNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the profiles put lib by name default response
func (o *ProfilesPutLibByNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the profiles put lib by name default response
func (o *ProfilesPutLibByNameDefault) WithPayload(payload *models.Error) *ProfilesPutLibByNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles put lib by name default response
func (o *ProfilesPutLibByNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesPutLibByNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
