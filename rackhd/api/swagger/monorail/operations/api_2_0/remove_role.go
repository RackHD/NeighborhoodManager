package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RemoveRoleHandlerFunc turns a function with the right signature into a remove role handler
type RemoveRoleHandlerFunc func(context.Context, RemoveRoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveRoleHandlerFunc) Handle(ctx context.Context, params RemoveRoleParams) middleware.Responder {
	return fn(ctx, params)
}

// RemoveRoleHandler interface for that can handle valid remove role params
type RemoveRoleHandler interface {
	Handle(context.Context, RemoveRoleParams) middleware.Responder
}

// NewRemoveRole creates a new http.Handler for the remove role operation
func NewRemoveRole(ctx *middleware.Context, handler RemoveRoleHandler) *RemoveRole {
	return &RemoveRole{Context: ctx, Handler: handler}
}

/*RemoveRole swagger:route DELETE /roles/{name} /api/2.0 removeRole

Delete a role

Delete the specified Role.

*/
type RemoveRole struct {
	Context *middleware.Context
	Handler RemoveRoleHandler
}

func (o *RemoveRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewRemoveRoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RemoveRoleUnauthorizedBody remove role unauthorized body
// swagger:model RemoveRoleUnauthorizedBody
type RemoveRoleUnauthorizedBody interface{}

// RemoveRoleForbiddenBody remove role forbidden body
// swagger:model RemoveRoleForbiddenBody
type RemoveRoleForbiddenBody interface{}
