package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ObmsDeleteByIDHandlerFunc turns a function with the right signature into a obms delete by Id handler
type ObmsDeleteByIDHandlerFunc func(context.Context, ObmsDeleteByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ObmsDeleteByIDHandlerFunc) Handle(ctx context.Context, params ObmsDeleteByIDParams) middleware.Responder {
	return fn(ctx, params)
}

// ObmsDeleteByIDHandler interface for that can handle valid obms delete by Id params
type ObmsDeleteByIDHandler interface {
	Handle(context.Context, ObmsDeleteByIDParams) middleware.Responder
}

// NewObmsDeleteByID creates a new http.Handler for the obms delete by Id operation
func NewObmsDeleteByID(ctx *middleware.Context, handler ObmsDeleteByIDHandler) *ObmsDeleteByID {
	return &ObmsDeleteByID{Context: ctx, Handler: handler}
}

/*ObmsDeleteByID swagger:route DELETE /obms/{identifier} /api/2.0 obmsDeleteById

Delete OBM settings

Delete the OBM settings with the specified identifier.

*/
type ObmsDeleteByID struct {
	Context *middleware.Context
	Handler ObmsDeleteByIDHandler
}

func (o *ObmsDeleteByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewObmsDeleteByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ObmsDeleteByIDNoContentBody obms delete by ID no content body
// swagger:model ObmsDeleteByIDNoContentBody
type ObmsDeleteByIDNoContentBody interface{}
