package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*NodesPutObmsByNodeIDCreated Successfully put the OBM service

swagger:response nodesPutObmsByNodeIdCreated
*/
type NodesPutObmsByNodeIDCreated struct {

	// In: body
	Payload NodesPutObmsByNodeIDCreatedBody `json:"body,omitempty"`
}

// NewNodesPutObmsByNodeIDCreated creates NodesPutObmsByNodeIDCreated with default headers values
func NewNodesPutObmsByNodeIDCreated() *NodesPutObmsByNodeIDCreated {
	return &NodesPutObmsByNodeIDCreated{}
}

// WithPayload adds the payload to the nodes put obms by node Id created response
func (o *NodesPutObmsByNodeIDCreated) WithPayload(payload NodesPutObmsByNodeIDCreatedBody) *NodesPutObmsByNodeIDCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes put obms by node Id created response
func (o *NodesPutObmsByNodeIDCreated) SetPayload(payload NodesPutObmsByNodeIDCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesPutObmsByNodeIDCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*NodesPutObmsByNodeIDInternalServerError OBM service creation failed

swagger:response nodesPutObmsByNodeIdInternalServerError
*/
type NodesPutObmsByNodeIDInternalServerError struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesPutObmsByNodeIDInternalServerError creates NodesPutObmsByNodeIDInternalServerError with default headers values
func NewNodesPutObmsByNodeIDInternalServerError() *NodesPutObmsByNodeIDInternalServerError {
	return &NodesPutObmsByNodeIDInternalServerError{}
}

// WithPayload adds the payload to the nodes put obms by node Id internal server error response
func (o *NodesPutObmsByNodeIDInternalServerError) WithPayload(payload *models.Error) *NodesPutObmsByNodeIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes put obms by node Id internal server error response
func (o *NodesPutObmsByNodeIDInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesPutObmsByNodeIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*NodesPutObmsByNodeIDDefault Unexpected error

swagger:response nodesPutObmsByNodeIdDefault
*/
type NodesPutObmsByNodeIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesPutObmsByNodeIDDefault creates NodesPutObmsByNodeIDDefault with default headers values
func NewNodesPutObmsByNodeIDDefault(code int) *NodesPutObmsByNodeIDDefault {
	if code <= 0 {
		code = 500
	}

	return &NodesPutObmsByNodeIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the nodes put obms by node Id default response
func (o *NodesPutObmsByNodeIDDefault) WithStatusCode(code int) *NodesPutObmsByNodeIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the nodes put obms by node Id default response
func (o *NodesPutObmsByNodeIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the nodes put obms by node Id default response
func (o *NodesPutObmsByNodeIDDefault) WithPayload(payload *models.Error) *NodesPutObmsByNodeIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes put obms by node Id default response
func (o *NodesPutObmsByNodeIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesPutObmsByNodeIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
