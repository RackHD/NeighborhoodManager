package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ObmsPutHandlerFunc turns a function with the right signature into a obms put handler
type ObmsPutHandlerFunc func(context.Context, ObmsPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ObmsPutHandlerFunc) Handle(ctx context.Context, params ObmsPutParams) middleware.Responder {
	return fn(ctx, params)
}

// ObmsPutHandler interface for that can handle valid obms put params
type ObmsPutHandler interface {
	Handle(context.Context, ObmsPutParams) middleware.Responder
}

// NewObmsPut creates a new http.Handler for the obms put operation
func NewObmsPut(ctx *middleware.Context, handler ObmsPutHandler) *ObmsPut {
	return &ObmsPut{Context: ctx, Handler: handler}
}

/*ObmsPut swagger:route PUT /obms /api/2.0 obmsPut

Put an OBM service

Create or update the specified OBM service, and associate it with a node.

*/
type ObmsPut struct {
	Context *middleware.Context
	Handler ObmsPutHandler
}

func (o *ObmsPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewObmsPutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ObmsPutCreatedBody obms put created body
// swagger:model ObmsPutCreatedBody
type ObmsPutCreatedBody interface{}
