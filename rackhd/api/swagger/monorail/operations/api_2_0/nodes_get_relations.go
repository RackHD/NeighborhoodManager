package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesGetRelationsHandlerFunc turns a function with the right signature into a nodes get relations handler
type NodesGetRelationsHandlerFunc func(context.Context, NodesGetRelationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesGetRelationsHandlerFunc) Handle(ctx context.Context, params NodesGetRelationsParams) middleware.Responder {
	return fn(ctx, params)
}

// NodesGetRelationsHandler interface for that can handle valid nodes get relations params
type NodesGetRelationsHandler interface {
	Handle(context.Context, NodesGetRelationsParams) middleware.Responder
}

// NewNodesGetRelations creates a new http.Handler for the nodes get relations operation
func NewNodesGetRelations(ctx *middleware.Context, handler NodesGetRelationsHandler) *NodesGetRelations {
	return &NodesGetRelations{Context: ctx, Handler: handler}
}

/*NodesGetRelations swagger:route GET /nodes/{identifier}/relations /api/2.0 nodesGetRelations

Get a nodes relations

Get the relations field of the specified node

*/
type NodesGetRelations struct {
	Context *middleware.Context
	Handler NodesGetRelationsHandler
}

func (o *NodesGetRelations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesGetRelationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
