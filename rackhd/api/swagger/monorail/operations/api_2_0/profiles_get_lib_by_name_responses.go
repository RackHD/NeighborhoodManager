package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*ProfilesGetLibByNameOK Successfully returned profile

swagger:response profilesGetLibByNameOK
*/
type ProfilesGetLibByNameOK struct {

	// In: body
	Payload ProfilesGetLibByNameOKBody `json:"body,omitempty"`
}

// NewProfilesGetLibByNameOK creates ProfilesGetLibByNameOK with default headers values
func NewProfilesGetLibByNameOK() *ProfilesGetLibByNameOK {
	return &ProfilesGetLibByNameOK{}
}

// WithPayload adds the payload to the profiles get lib by name o k response
func (o *ProfilesGetLibByNameOK) WithPayload(payload ProfilesGetLibByNameOKBody) *ProfilesGetLibByNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles get lib by name o k response
func (o *ProfilesGetLibByNameOK) SetPayload(payload ProfilesGetLibByNameOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesGetLibByNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ProfilesGetLibByNameNotFound The profile with the specified name was not found

swagger:response profilesGetLibByNameNotFound
*/
type ProfilesGetLibByNameNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewProfilesGetLibByNameNotFound creates ProfilesGetLibByNameNotFound with default headers values
func NewProfilesGetLibByNameNotFound() *ProfilesGetLibByNameNotFound {
	return &ProfilesGetLibByNameNotFound{}
}

// WithPayload adds the payload to the profiles get lib by name not found response
func (o *ProfilesGetLibByNameNotFound) WithPayload(payload *models.Error) *ProfilesGetLibByNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles get lib by name not found response
func (o *ProfilesGetLibByNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesGetLibByNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ProfilesGetLibByNameDefault Unexpected error

swagger:response profilesGetLibByNameDefault
*/
type ProfilesGetLibByNameDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewProfilesGetLibByNameDefault creates ProfilesGetLibByNameDefault with default headers values
func NewProfilesGetLibByNameDefault(code int) *ProfilesGetLibByNameDefault {
	if code <= 0 {
		code = 500
	}

	return &ProfilesGetLibByNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the profiles get lib by name default response
func (o *ProfilesGetLibByNameDefault) WithStatusCode(code int) *ProfilesGetLibByNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the profiles get lib by name default response
func (o *ProfilesGetLibByNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the profiles get lib by name default response
func (o *ProfilesGetLibByNameDefault) WithPayload(payload *models.Error) *ProfilesGetLibByNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles get lib by name default response
func (o *ProfilesGetLibByNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesGetLibByNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
