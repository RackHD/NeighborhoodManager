package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*WorkflowsDeleteTasksByNameNoContent Successfully deleted the specified workflow task

swagger:response workflowsDeleteTasksByNameNoContent
*/
type WorkflowsDeleteTasksByNameNoContent struct {

	// In: body
	Payload WorkflowsDeleteTasksByNameNoContentBody `json:"body,omitempty"`
}

// NewWorkflowsDeleteTasksByNameNoContent creates WorkflowsDeleteTasksByNameNoContent with default headers values
func NewWorkflowsDeleteTasksByNameNoContent() *WorkflowsDeleteTasksByNameNoContent {
	return &WorkflowsDeleteTasksByNameNoContent{}
}

// WithPayload adds the payload to the workflows delete tasks by name no content response
func (o *WorkflowsDeleteTasksByNameNoContent) WithPayload(payload WorkflowsDeleteTasksByNameNoContentBody) *WorkflowsDeleteTasksByNameNoContent {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete tasks by name no content response
func (o *WorkflowsDeleteTasksByNameNoContent) SetPayload(payload WorkflowsDeleteTasksByNameNoContentBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteTasksByNameNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*WorkflowsDeleteTasksByNameNotFound The workflow task with the specified injectable name was not found

swagger:response workflowsDeleteTasksByNameNotFound
*/
type WorkflowsDeleteTasksByNameNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewWorkflowsDeleteTasksByNameNotFound creates WorkflowsDeleteTasksByNameNotFound with default headers values
func NewWorkflowsDeleteTasksByNameNotFound() *WorkflowsDeleteTasksByNameNotFound {
	return &WorkflowsDeleteTasksByNameNotFound{}
}

// WithPayload adds the payload to the workflows delete tasks by name not found response
func (o *WorkflowsDeleteTasksByNameNotFound) WithPayload(payload *models.Error) *WorkflowsDeleteTasksByNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete tasks by name not found response
func (o *WorkflowsDeleteTasksByNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteTasksByNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*WorkflowsDeleteTasksByNameDefault Unexpected error

swagger:response workflowsDeleteTasksByNameDefault
*/
type WorkflowsDeleteTasksByNameDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewWorkflowsDeleteTasksByNameDefault creates WorkflowsDeleteTasksByNameDefault with default headers values
func NewWorkflowsDeleteTasksByNameDefault(code int) *WorkflowsDeleteTasksByNameDefault {
	if code <= 0 {
		code = 500
	}

	return &WorkflowsDeleteTasksByNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the workflows delete tasks by name default response
func (o *WorkflowsDeleteTasksByNameDefault) WithStatusCode(code int) *WorkflowsDeleteTasksByNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the workflows delete tasks by name default response
func (o *WorkflowsDeleteTasksByNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the workflows delete tasks by name default response
func (o *WorkflowsDeleteTasksByNameDefault) WithPayload(payload *models.Error) *WorkflowsDeleteTasksByNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete tasks by name default response
func (o *WorkflowsDeleteTasksByNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteTasksByNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
