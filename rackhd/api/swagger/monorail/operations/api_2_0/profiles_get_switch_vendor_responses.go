package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*ProfilesGetSwitchVendorOK Successfully returned the profile with switch vendor name.

swagger:response profilesGetSwitchVendorOK
*/
type ProfilesGetSwitchVendorOK struct {

	// In: body
	Payload ProfilesGetSwitchVendorOKBody `json:"body,omitempty"`
}

// NewProfilesGetSwitchVendorOK creates ProfilesGetSwitchVendorOK with default headers values
func NewProfilesGetSwitchVendorOK() *ProfilesGetSwitchVendorOK {
	return &ProfilesGetSwitchVendorOK{}
}

// WithPayload adds the payload to the profiles get switch vendor o k response
func (o *ProfilesGetSwitchVendorOK) WithPayload(payload ProfilesGetSwitchVendorOKBody) *ProfilesGetSwitchVendorOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles get switch vendor o k response
func (o *ProfilesGetSwitchVendorOK) SetPayload(payload ProfilesGetSwitchVendorOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesGetSwitchVendorOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ProfilesGetSwitchVendorNotFound Profile not found

swagger:response profilesGetSwitchVendorNotFound
*/
type ProfilesGetSwitchVendorNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewProfilesGetSwitchVendorNotFound creates ProfilesGetSwitchVendorNotFound with default headers values
func NewProfilesGetSwitchVendorNotFound() *ProfilesGetSwitchVendorNotFound {
	return &ProfilesGetSwitchVendorNotFound{}
}

// WithPayload adds the payload to the profiles get switch vendor not found response
func (o *ProfilesGetSwitchVendorNotFound) WithPayload(payload *models.Error) *ProfilesGetSwitchVendorNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles get switch vendor not found response
func (o *ProfilesGetSwitchVendorNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesGetSwitchVendorNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ProfilesGetSwitchVendorDefault Unexpected error

swagger:response profilesGetSwitchVendorDefault
*/
type ProfilesGetSwitchVendorDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewProfilesGetSwitchVendorDefault creates ProfilesGetSwitchVendorDefault with default headers values
func NewProfilesGetSwitchVendorDefault(code int) *ProfilesGetSwitchVendorDefault {
	if code <= 0 {
		code = 500
	}

	return &ProfilesGetSwitchVendorDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the profiles get switch vendor default response
func (o *ProfilesGetSwitchVendorDefault) WithStatusCode(code int) *ProfilesGetSwitchVendorDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the profiles get switch vendor default response
func (o *ProfilesGetSwitchVendorDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the profiles get switch vendor default response
func (o *ProfilesGetSwitchVendorDefault) WithPayload(payload *models.Error) *ProfilesGetSwitchVendorDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the profiles get switch vendor default response
func (o *ProfilesGetSwitchVendorDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ProfilesGetSwitchVendorDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
