package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*FilesDeleteNoContent File successfully deleted

swagger:response filesDeleteNoContent
*/
type FilesDeleteNoContent struct {
}

// NewFilesDeleteNoContent creates FilesDeleteNoContent with default headers values
func NewFilesDeleteNoContent() *FilesDeleteNoContent {
	return &FilesDeleteNoContent{}
}

// WriteResponse to the client
func (o *FilesDeleteNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*FilesDeleteNotFound File not found.

swagger:response filesDeleteNotFound
*/
type FilesDeleteNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewFilesDeleteNotFound creates FilesDeleteNotFound with default headers values
func NewFilesDeleteNotFound() *FilesDeleteNotFound {
	return &FilesDeleteNotFound{}
}

// WithPayload adds the payload to the files delete not found response
func (o *FilesDeleteNotFound) WithPayload(payload *models.Error) *FilesDeleteNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the files delete not found response
func (o *FilesDeleteNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FilesDeleteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*FilesDeleteInternalServerError Error deleting file from the database

swagger:response filesDeleteInternalServerError
*/
type FilesDeleteInternalServerError struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewFilesDeleteInternalServerError creates FilesDeleteInternalServerError with default headers values
func NewFilesDeleteInternalServerError() *FilesDeleteInternalServerError {
	return &FilesDeleteInternalServerError{}
}

// WithPayload adds the payload to the files delete internal server error response
func (o *FilesDeleteInternalServerError) WithPayload(payload *models.Error) *FilesDeleteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the files delete internal server error response
func (o *FilesDeleteInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FilesDeleteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*FilesDeleteDefault Unexpected error

swagger:response filesDeleteDefault
*/
type FilesDeleteDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewFilesDeleteDefault creates FilesDeleteDefault with default headers values
func NewFilesDeleteDefault(code int) *FilesDeleteDefault {
	if code <= 0 {
		code = 500
	}

	return &FilesDeleteDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the files delete default response
func (o *FilesDeleteDefault) WithStatusCode(code int) *FilesDeleteDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the files delete default response
func (o *FilesDeleteDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the files delete default response
func (o *FilesDeleteDefault) WithPayload(payload *models.Error) *FilesDeleteDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the files delete default response
func (o *FilesDeleteDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FilesDeleteDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
