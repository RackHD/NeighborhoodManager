package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*RemoveUserNoContent Successfully deleted the specified user

swagger:response removeUserNoContent
*/
type RemoveUserNoContent struct {
}

// NewRemoveUserNoContent creates RemoveUserNoContent with default headers values
func NewRemoveUserNoContent() *RemoveUserNoContent {
	return &RemoveUserNoContent{}
}

// WriteResponse to the client
func (o *RemoveUserNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*RemoveUserUnauthorized Unauthorized

swagger:response removeUserUnauthorized
*/
type RemoveUserUnauthorized struct {

	// In: body
	Payload RemoveUserUnauthorizedBody `json:"body,omitempty"`
}

// NewRemoveUserUnauthorized creates RemoveUserUnauthorized with default headers values
func NewRemoveUserUnauthorized() *RemoveUserUnauthorized {
	return &RemoveUserUnauthorized{}
}

// WithPayload adds the payload to the remove user unauthorized response
func (o *RemoveUserUnauthorized) WithPayload(payload RemoveUserUnauthorizedBody) *RemoveUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove user unauthorized response
func (o *RemoveUserUnauthorized) SetPayload(payload RemoveUserUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*RemoveUserForbidden Forbidden

swagger:response removeUserForbidden
*/
type RemoveUserForbidden struct {

	// In: body
	Payload RemoveUserForbiddenBody `json:"body,omitempty"`
}

// NewRemoveUserForbidden creates RemoveUserForbidden with default headers values
func NewRemoveUserForbidden() *RemoveUserForbidden {
	return &RemoveUserForbidden{}
}

// WithPayload adds the payload to the remove user forbidden response
func (o *RemoveUserForbidden) WithPayload(payload RemoveUserForbiddenBody) *RemoveUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove user forbidden response
func (o *RemoveUserForbidden) SetPayload(payload RemoveUserForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*RemoveUserDefault Unexpected error

swagger:response removeUserDefault
*/
type RemoveUserDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewRemoveUserDefault creates RemoveUserDefault with default headers values
func NewRemoveUserDefault(code int) *RemoveUserDefault {
	if code <= 0 {
		code = 500
	}

	return &RemoveUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the remove user default response
func (o *RemoveUserDefault) WithStatusCode(code int) *RemoveUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the remove user default response
func (o *RemoveUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the remove user default response
func (o *RemoveUserDefault) WithPayload(payload *models.Error) *RemoveUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove user default response
func (o *RemoveUserDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
