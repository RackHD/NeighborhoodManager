package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ViewsGetHandlerFunc turns a function with the right signature into a views get handler
type ViewsGetHandlerFunc func(context.Context, ViewsGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ViewsGetHandlerFunc) Handle(ctx context.Context, params ViewsGetParams) middleware.Responder {
	return fn(ctx, params)
}

// ViewsGetHandler interface for that can handle valid views get params
type ViewsGetHandler interface {
	Handle(context.Context, ViewsGetParams) middleware.Responder
}

// NewViewsGet creates a new http.Handler for the views get operation
func NewViewsGet(ctx *middleware.Context, handler ViewsGetHandler) *ViewsGet {
	return &ViewsGet{Context: ctx, Handler: handler}
}

/*ViewsGet swagger:route GET /views /api/2.0 viewsGet

Get all views

Retrieve a list of all views. Views are used to render the output of various system resources, such as nodes, pollers, and OBM settings.


*/
type ViewsGet struct {
	Context *middleware.Context
	Handler ViewsGetHandler
}

func (o *ViewsGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewViewsGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ViewsGetOKBody views get o k body
// swagger:model ViewsGetOKBody
type ViewsGetOKBody interface{}
