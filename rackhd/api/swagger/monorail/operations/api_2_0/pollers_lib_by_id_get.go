package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PollersLibByIDGetHandlerFunc turns a function with the right signature into a pollers lib by Id get handler
type PollersLibByIDGetHandlerFunc func(context.Context, PollersLibByIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PollersLibByIDGetHandlerFunc) Handle(ctx context.Context, params PollersLibByIDGetParams) middleware.Responder {
	return fn(ctx, params)
}

// PollersLibByIDGetHandler interface for that can handle valid pollers lib by Id get params
type PollersLibByIDGetHandler interface {
	Handle(context.Context, PollersLibByIDGetParams) middleware.Responder
}

// NewPollersLibByIDGet creates a new http.Handler for the pollers lib by Id get operation
func NewPollersLibByIDGet(ctx *middleware.Context, handler PollersLibByIDGetHandler) *PollersLibByIDGet {
	return &PollersLibByIDGet{Context: ctx, Handler: handler}
}

/*PollersLibByIDGet swagger:route GET /pollers/library/{identifier} /api/2.0 pollersLibByIdGet

Get the specified poller

Get the poller definition with the specified identifier from the poller library


*/
type PollersLibByIDGet struct {
	Context *middleware.Context
	Handler PollersLibByIDGetHandler
}

func (o *PollersLibByIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPollersLibByIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PollersLibByIDGetOKBody pollers lib by ID get o k body
// swagger:model PollersLibByIDGetOKBody
type PollersLibByIDGetOKBody interface{}
