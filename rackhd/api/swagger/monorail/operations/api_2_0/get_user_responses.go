package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/rackhd/api/swagger/models"
)

/*GetUserOK Successfully retrieved the specified user

swagger:response getUserOK
*/
type GetUserOK struct {

	// In: body
	Payload *models.UserObj `json:"body,omitempty"`
}

// NewGetUserOK creates GetUserOK with default headers values
func NewGetUserOK() *GetUserOK {
	return &GetUserOK{}
}

// WithPayload adds the payload to the get user o k response
func (o *GetUserOK) WithPayload(payload *models.UserObj) *GetUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user o k response
func (o *GetUserOK) SetPayload(payload *models.UserObj) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetUserUnauthorized Unauthorized

swagger:response getUserUnauthorized
*/
type GetUserUnauthorized struct {

	// In: body
	Payload GetUserUnauthorizedBody `json:"body,omitempty"`
}

// NewGetUserUnauthorized creates GetUserUnauthorized with default headers values
func NewGetUserUnauthorized() *GetUserUnauthorized {
	return &GetUserUnauthorized{}
}

// WithPayload adds the payload to the get user unauthorized response
func (o *GetUserUnauthorized) WithPayload(payload GetUserUnauthorizedBody) *GetUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user unauthorized response
func (o *GetUserUnauthorized) SetPayload(payload GetUserUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetUserForbidden Forbidden

swagger:response getUserForbidden
*/
type GetUserForbidden struct {

	// In: body
	Payload GetUserForbiddenBody `json:"body,omitempty"`
}

// NewGetUserForbidden creates GetUserForbidden with default headers values
func NewGetUserForbidden() *GetUserForbidden {
	return &GetUserForbidden{}
}

// WithPayload adds the payload to the get user forbidden response
func (o *GetUserForbidden) WithPayload(payload GetUserForbiddenBody) *GetUserForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user forbidden response
func (o *GetUserForbidden) SetPayload(payload GetUserForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetUserDefault Unexpected error

swagger:response getUserDefault
*/
type GetUserDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetUserDefault creates GetUserDefault with default headers values
func NewGetUserDefault(code int) *GetUserDefault {
	if code <= 0 {
		code = 500
	}

	return &GetUserDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get user default response
func (o *GetUserDefault) WithStatusCode(code int) *GetUserDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get user default response
func (o *GetUserDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get user default response
func (o *GetUserDefault) WithPayload(payload *models.Error) *GetUserDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user default response
func (o *GetUserDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
