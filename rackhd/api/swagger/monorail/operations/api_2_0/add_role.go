package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// AddRoleHandlerFunc turns a function with the right signature into a add role handler
type AddRoleHandlerFunc func(context.Context, AddRoleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddRoleHandlerFunc) Handle(ctx context.Context, params AddRoleParams) middleware.Responder {
	return fn(ctx, params)
}

// AddRoleHandler interface for that can handle valid add role params
type AddRoleHandler interface {
	Handle(context.Context, AddRoleParams) middleware.Responder
}

// NewAddRole creates a new http.Handler for the add role operation
func NewAddRole(ctx *middleware.Context, handler AddRoleHandler) *AddRole {
	return &AddRole{Context: ctx, Handler: handler}
}

/*AddRole swagger:route POST /roles /api/2.0 addRole

Post a new role

Create a new role and store it.

*/
type AddRole struct {
	Context *middleware.Context
	Handler AddRoleHandler
}

func (o *AddRole) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAddRoleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddRoleForbiddenBody add role forbidden body
// swagger:model AddRoleForbiddenBody
type AddRoleForbiddenBody interface{}

// AddRoleCreatedBody add role created body
// swagger:model AddRoleCreatedBody
type AddRoleCreatedBody interface{}

// AddRoleUnauthorizedBody add role unauthorized body
// swagger:model AddRoleUnauthorizedBody
type AddRoleUnauthorizedBody interface{}
