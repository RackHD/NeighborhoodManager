package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WorkflowsPutGraphsHandlerFunc turns a function with the right signature into a workflows put graphs handler
type WorkflowsPutGraphsHandlerFunc func(context.Context, WorkflowsPutGraphsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WorkflowsPutGraphsHandlerFunc) Handle(ctx context.Context, params WorkflowsPutGraphsParams) middleware.Responder {
	return fn(ctx, params)
}

// WorkflowsPutGraphsHandler interface for that can handle valid workflows put graphs params
type WorkflowsPutGraphsHandler interface {
	Handle(context.Context, WorkflowsPutGraphsParams) middleware.Responder
}

// NewWorkflowsPutGraphs creates a new http.Handler for the workflows put graphs operation
func NewWorkflowsPutGraphs(ctx *middleware.Context, handler WorkflowsPutGraphsHandler) *WorkflowsPutGraphs {
	return &WorkflowsPutGraphs{Context: ctx, Handler: handler}
}

/*WorkflowsPutGraphs swagger:route PUT /workflows/graphs /api/2.0 workflowsPutGraphs

Put a graph

Create or modify a workflow graph in the graph library.

*/
type WorkflowsPutGraphs struct {
	Context *middleware.Context
	Handler WorkflowsPutGraphsHandler
}

func (o *WorkflowsPutGraphs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWorkflowsPutGraphsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WorkflowsPutGraphsCreatedBody workflows put graphs created body
// swagger:model WorkflowsPutGraphsCreatedBody
type WorkflowsPutGraphsCreatedBody interface{}
