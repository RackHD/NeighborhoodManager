package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesDelRelationsHandlerFunc turns a function with the right signature into a nodes del relations handler
type NodesDelRelationsHandlerFunc func(context.Context, NodesDelRelationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesDelRelationsHandlerFunc) Handle(ctx context.Context, params NodesDelRelationsParams) middleware.Responder {
	return fn(ctx, params)
}

// NodesDelRelationsHandler interface for that can handle valid nodes del relations params
type NodesDelRelationsHandler interface {
	Handle(context.Context, NodesDelRelationsParams) middleware.Responder
}

// NewNodesDelRelations creates a new http.Handler for the nodes del relations operation
func NewNodesDelRelations(ctx *middleware.Context, handler NodesDelRelationsHandler) *NodesDelRelations {
	return &NodesDelRelations{Context: ctx, Handler: handler}
}

/*NodesDelRelations swagger:route DELETE /nodes/{identifier}/relations /api/2.0 nodesDelRelations

Remove relations from a node

Edit the relations fields of nodes to remove specific relationships

*/
type NodesDelRelations struct {
	Context *middleware.Context
	Handler NodesDelRelationsHandler
}

func (o *NodesDelRelations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesDelRelationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
