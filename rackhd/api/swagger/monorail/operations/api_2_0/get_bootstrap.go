package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetBootstrapHandlerFunc turns a function with the right signature into a get bootstrap handler
type GetBootstrapHandlerFunc func(context.Context, GetBootstrapParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBootstrapHandlerFunc) Handle(ctx context.Context, params GetBootstrapParams) middleware.Responder {
	return fn(ctx, params)
}

// GetBootstrapHandler interface for that can handle valid get bootstrap params
type GetBootstrapHandler interface {
	Handle(context.Context, GetBootstrapParams) middleware.Responder
}

// NewGetBootstrap creates a new http.Handler for the get bootstrap operation
func NewGetBootstrap(ctx *middleware.Context, handler GetBootstrapHandler) *GetBootstrap {
	return &GetBootstrap{Context: ctx, Handler: handler}
}

/*GetBootstrap swagger:route GET /tasks/bootstrap.js /api/2.0 getBootstrap

Get tasks bootstrap.js

Used internally by the system - get tasks bootstrap.js

*/
type GetBootstrap struct {
	Context *middleware.Context
	Handler GetBootstrapHandler
}

func (o *GetBootstrap) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetBootstrapParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
