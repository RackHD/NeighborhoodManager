package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/RackHD/neighborhood-manager/swagger/restapi/operations/api_2_0"
)

// NewRackHD20API creates a new RackHD20 instance
func NewRackHD20API(spec *loads.Document) *RackHD20API {
	return &RackHD20API{
		handlers:        make(map[string]map[string]http.Handler),
		formats:         strfmt.Default,
		defaultConsumes: "application/json",
		defaultProduces: "application/json",
		ServerShutdown:  func() {},
		spec:            spec,
	}
}

/*RackHD20API the rack h d20 API */
type RackHD20API struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer
	// BinConsumer registers a consumer for a "application/octet-stream" mime type
	BinConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for a "application/x-www-form-urlencoded" mime type
	UrlformConsumer runtime.Consumer
	// MultipartformConsumer registers a consumer for a "multipart/form-data" mime type
	MultipartformConsumer runtime.Consumer
	// TxtConsumer registers a consumer for a "text/plain" mime type
	TxtConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// API20AddRoleHandler sets the operation handler for the add role operation
	API20AddRoleHandler api_2_0.AddRoleHandler
	// API20AddUserHandler sets the operation handler for the add user operation
	API20AddUserHandler api_2_0.AddUserHandler
	// API20CatalogsGetHandler sets the operation handler for the catalogs get operation
	API20CatalogsGetHandler api_2_0.CatalogsGetHandler
	// API20CatalogsIDGetHandler sets the operation handler for the catalogs Id get operation
	API20CatalogsIDGetHandler api_2_0.CatalogsIDGetHandler
	// API20ConfigGetHandler sets the operation handler for the config get operation
	API20ConfigGetHandler api_2_0.ConfigGetHandler
	// API20ConfigPatchHandler sets the operation handler for the config patch operation
	API20ConfigPatchHandler api_2_0.ConfigPatchHandler
	// API20CreateTagHandler sets the operation handler for the create tag operation
	API20CreateTagHandler api_2_0.CreateTagHandler
	// API20DeleteTagHandler sets the operation handler for the delete tag operation
	API20DeleteTagHandler api_2_0.DeleteTagHandler
	// API20FilesDeleteHandler sets the operation handler for the files delete operation
	API20FilesDeleteHandler api_2_0.FilesDeleteHandler
	// API20FilesGetHandler sets the operation handler for the files get operation
	API20FilesGetHandler api_2_0.FilesGetHandler
	// API20FilesGetAllHandler sets the operation handler for the files get all operation
	API20FilesGetAllHandler api_2_0.FilesGetAllHandler
	// API20FilesMd5GetHandler sets the operation handler for the files md5 get operation
	API20FilesMd5GetHandler api_2_0.FilesMd5GetHandler
	// API20FilesMetadataGetHandler sets the operation handler for the files metadata get operation
	API20FilesMetadataGetHandler api_2_0.FilesMetadataGetHandler
	// API20FilesPutHandler sets the operation handler for the files put operation
	API20FilesPutHandler api_2_0.FilesPutHandler
	// API20GetAllTagsHandler sets the operation handler for the get all tags operation
	API20GetAllTagsHandler api_2_0.GetAllTagsHandler
	// API20GetBootstrapHandler sets the operation handler for the get bootstrap operation
	API20GetBootstrapHandler api_2_0.GetBootstrapHandler
	// API20GetNodesByTagHandler sets the operation handler for the get nodes by tag operation
	API20GetNodesByTagHandler api_2_0.GetNodesByTagHandler
	// API20GetRoleHandler sets the operation handler for the get role operation
	API20GetRoleHandler api_2_0.GetRoleHandler
	// API20GetTagHandler sets the operation handler for the get tag operation
	API20GetTagHandler api_2_0.GetTagHandler
	// API20GetTasksByIDHandler sets the operation handler for the get tasks by Id operation
	API20GetTasksByIDHandler api_2_0.GetTasksByIDHandler
	// API20GetUserHandler sets the operation handler for the get user operation
	API20GetUserHandler api_2_0.GetUserHandler
	// API20ListRolesHandler sets the operation handler for the list roles operation
	API20ListRolesHandler api_2_0.ListRolesHandler
	// API20ListUsersHandler sets the operation handler for the list users operation
	API20ListUsersHandler api_2_0.ListUsersHandler
	// API20LookupsDelByIDHandler sets the operation handler for the lookups del by Id operation
	API20LookupsDelByIDHandler api_2_0.LookupsDelByIDHandler
	// API20LookupsGetHandler sets the operation handler for the lookups get operation
	API20LookupsGetHandler api_2_0.LookupsGetHandler
	// API20LookupsGetByIDHandler sets the operation handler for the lookups get by Id operation
	API20LookupsGetByIDHandler api_2_0.LookupsGetByIDHandler
	// API20LookupsPatchByIDHandler sets the operation handler for the lookups patch by Id operation
	API20LookupsPatchByIDHandler api_2_0.LookupsPatchByIDHandler
	// API20LookupsPostHandler sets the operation handler for the lookups post operation
	API20LookupsPostHandler api_2_0.LookupsPostHandler
	// API20ModifyRoleHandler sets the operation handler for the modify role operation
	API20ModifyRoleHandler api_2_0.ModifyRoleHandler
	// API20ModifyUserHandler sets the operation handler for the modify user operation
	API20ModifyUserHandler api_2_0.ModifyUserHandler
	// API20NodesAddRelationsHandler sets the operation handler for the nodes add relations operation
	API20NodesAddRelationsHandler api_2_0.NodesAddRelationsHandler
	// API20NodesDelByIDHandler sets the operation handler for the nodes del by Id operation
	API20NodesDelByIDHandler api_2_0.NodesDelByIDHandler
	// API20NodesDelRelationsHandler sets the operation handler for the nodes del relations operation
	API20NodesDelRelationsHandler api_2_0.NodesDelRelationsHandler
	// API20NodesDelTagByIDHandler sets the operation handler for the nodes del tag by Id operation
	API20NodesDelTagByIDHandler api_2_0.NodesDelTagByIDHandler
	// API20NodesGetAllHandler sets the operation handler for the nodes get all operation
	API20NodesGetAllHandler api_2_0.NodesGetAllHandler
	// API20NodesGetByIDHandler sets the operation handler for the nodes get by Id operation
	API20NodesGetByIDHandler api_2_0.NodesGetByIDHandler
	// API20NodesGetCatalogByIDHandler sets the operation handler for the nodes get catalog by Id operation
	API20NodesGetCatalogByIDHandler api_2_0.NodesGetCatalogByIDHandler
	// API20NodesGetCatalogSourceByIDHandler sets the operation handler for the nodes get catalog source by Id operation
	API20NodesGetCatalogSourceByIDHandler api_2_0.NodesGetCatalogSourceByIDHandler
	// API20NodesGetObmsByNodeIDHandler sets the operation handler for the nodes get obms by node Id operation
	API20NodesGetObmsByNodeIDHandler api_2_0.NodesGetObmsByNodeIDHandler
	// API20NodesGetPollersByIDHandler sets the operation handler for the nodes get pollers by Id operation
	API20NodesGetPollersByIDHandler api_2_0.NodesGetPollersByIDHandler
	// API20NodesGetRelationsHandler sets the operation handler for the nodes get relations operation
	API20NodesGetRelationsHandler api_2_0.NodesGetRelationsHandler
	// API20NodesGetSSHByIDHandler sets the operation handler for the nodes get Ssh by Id operation
	API20NodesGetSSHByIDHandler api_2_0.NodesGetSSHByIDHandler
	// API20NodesGetTagsByIDHandler sets the operation handler for the nodes get tags by Id operation
	API20NodesGetTagsByIDHandler api_2_0.NodesGetTagsByIDHandler
	// API20NodesGetWorkflowByIDHandler sets the operation handler for the nodes get workflow by Id operation
	API20NodesGetWorkflowByIDHandler api_2_0.NodesGetWorkflowByIDHandler
	// API20NodesMasterDelTagByIDHandler sets the operation handler for the nodes master del tag by Id operation
	API20NodesMasterDelTagByIDHandler api_2_0.NodesMasterDelTagByIDHandler
	// API20NodesPatchByIDHandler sets the operation handler for the nodes patch by Id operation
	API20NodesPatchByIDHandler api_2_0.NodesPatchByIDHandler
	// API20NodesPatchTagByIDHandler sets the operation handler for the nodes patch tag by Id operation
	API20NodesPatchTagByIDHandler api_2_0.NodesPatchTagByIDHandler
	// API20NodesPostHandler sets the operation handler for the nodes post operation
	API20NodesPostHandler api_2_0.NodesPostHandler
	// API20NodesPostSSHByIDHandler sets the operation handler for the nodes post Ssh by Id operation
	API20NodesPostSSHByIDHandler api_2_0.NodesPostSSHByIDHandler
	// API20NodesPostWorkflowByIDHandler sets the operation handler for the nodes post workflow by Id operation
	API20NodesPostWorkflowByIDHandler api_2_0.NodesPostWorkflowByIDHandler
	// API20NodesPutObmsByNodeIDHandler sets the operation handler for the nodes put obms by node Id operation
	API20NodesPutObmsByNodeIDHandler api_2_0.NodesPutObmsByNodeIDHandler
	// API20NodesWorkflowActionByIDHandler sets the operation handler for the nodes workflow action by Id operation
	API20NodesWorkflowActionByIDHandler api_2_0.NodesWorkflowActionByIDHandler
	// API20ObmsDefinitionsGetAllHandler sets the operation handler for the obms definitions get all operation
	API20ObmsDefinitionsGetAllHandler api_2_0.ObmsDefinitionsGetAllHandler
	// API20ObmsDefinitionsGetByNameHandler sets the operation handler for the obms definitions get by name operation
	API20ObmsDefinitionsGetByNameHandler api_2_0.ObmsDefinitionsGetByNameHandler
	// API20ObmsDeleteByIDHandler sets the operation handler for the obms delete by Id operation
	API20ObmsDeleteByIDHandler api_2_0.ObmsDeleteByIDHandler
	// API20ObmsGetHandler sets the operation handler for the obms get operation
	API20ObmsGetHandler api_2_0.ObmsGetHandler
	// API20ObmsGetByIDHandler sets the operation handler for the obms get by Id operation
	API20ObmsGetByIDHandler api_2_0.ObmsGetByIDHandler
	// API20ObmsPatchByIDHandler sets the operation handler for the obms patch by Id operation
	API20ObmsPatchByIDHandler api_2_0.ObmsPatchByIDHandler
	// API20ObmsPostLedHandler sets the operation handler for the obms post led operation
	API20ObmsPostLedHandler api_2_0.ObmsPostLedHandler
	// API20ObmsPutHandler sets the operation handler for the obms put operation
	API20ObmsPutHandler api_2_0.ObmsPutHandler
	// API20PollersCurrentDataGetHandler sets the operation handler for the pollers current data get operation
	API20PollersCurrentDataGetHandler api_2_0.PollersCurrentDataGetHandler
	// API20PollersDataGetHandler sets the operation handler for the pollers data get operation
	API20PollersDataGetHandler api_2_0.PollersDataGetHandler
	// API20PollersDeleteHandler sets the operation handler for the pollers delete operation
	API20PollersDeleteHandler api_2_0.PollersDeleteHandler
	// API20PollersGetHandler sets the operation handler for the pollers get operation
	API20PollersGetHandler api_2_0.PollersGetHandler
	// API20PollersIDGetHandler sets the operation handler for the pollers Id get operation
	API20PollersIDGetHandler api_2_0.PollersIDGetHandler
	// API20PollersLibByIDGetHandler sets the operation handler for the pollers lib by Id get operation
	API20PollersLibByIDGetHandler api_2_0.PollersLibByIDGetHandler
	// API20PollersLibGetHandler sets the operation handler for the pollers lib get operation
	API20PollersLibGetHandler api_2_0.PollersLibGetHandler
	// API20PollersPatchHandler sets the operation handler for the pollers patch operation
	API20PollersPatchHandler api_2_0.PollersPatchHandler
	// API20PollersPostHandler sets the operation handler for the pollers post operation
	API20PollersPostHandler api_2_0.PollersPostHandler
	// API20PostTaskByIDHandler sets the operation handler for the post task by Id operation
	API20PostTaskByIDHandler api_2_0.PostTaskByIDHandler
	// API20PostWorkflowByIDHandler sets the operation handler for the post workflow by Id operation
	API20PostWorkflowByIDHandler api_2_0.PostWorkflowByIDHandler
	// API20ProfilesGetHandler sets the operation handler for the profiles get operation
	API20ProfilesGetHandler api_2_0.ProfilesGetHandler
	// API20ProfilesGetLibByNameHandler sets the operation handler for the profiles get lib by name operation
	API20ProfilesGetLibByNameHandler api_2_0.ProfilesGetLibByNameHandler
	// API20ProfilesGetMetadataHandler sets the operation handler for the profiles get metadata operation
	API20ProfilesGetMetadataHandler api_2_0.ProfilesGetMetadataHandler
	// API20ProfilesGetMetadataByNameHandler sets the operation handler for the profiles get metadata by name operation
	API20ProfilesGetMetadataByNameHandler api_2_0.ProfilesGetMetadataByNameHandler
	// API20ProfilesGetSwitchVendorHandler sets the operation handler for the profiles get switch vendor operation
	API20ProfilesGetSwitchVendorHandler api_2_0.ProfilesGetSwitchVendorHandler
	// API20ProfilesPostSwitchErrorHandler sets the operation handler for the profiles post switch error operation
	API20ProfilesPostSwitchErrorHandler api_2_0.ProfilesPostSwitchErrorHandler
	// API20ProfilesPutLibByNameHandler sets the operation handler for the profiles put lib by name operation
	API20ProfilesPutLibByNameHandler api_2_0.ProfilesPutLibByNameHandler
	// API20RemoveRoleHandler sets the operation handler for the remove role operation
	API20RemoveRoleHandler api_2_0.RemoveRoleHandler
	// API20RemoveUserHandler sets the operation handler for the remove user operation
	API20RemoveUserHandler api_2_0.RemoveUserHandler
	// API20SchemasGetHandler sets the operation handler for the schemas get operation
	API20SchemasGetHandler api_2_0.SchemasGetHandler
	// API20SchemasIDGetHandler sets the operation handler for the schemas Id get operation
	API20SchemasIDGetHandler api_2_0.SchemasIDGetHandler
	// API20SkuPackPostHandler sets the operation handler for the sku pack post operation
	API20SkuPackPostHandler api_2_0.SkuPackPostHandler
	// API20SkusGetHandler sets the operation handler for the skus get operation
	API20SkusGetHandler api_2_0.SkusGetHandler
	// API20SkusIDDeleteHandler sets the operation handler for the skus Id delete operation
	API20SkusIDDeleteHandler api_2_0.SkusIDDeleteHandler
	// API20SkusIDDeletePackHandler sets the operation handler for the skus Id delete pack operation
	API20SkusIDDeletePackHandler api_2_0.SkusIDDeletePackHandler
	// API20SkusIDGetHandler sets the operation handler for the skus Id get operation
	API20SkusIDGetHandler api_2_0.SkusIDGetHandler
	// API20SkusIDGetNodesHandler sets the operation handler for the skus Id get nodes operation
	API20SkusIDGetNodesHandler api_2_0.SkusIDGetNodesHandler
	// API20SkusIDPutPackHandler sets the operation handler for the skus Id put pack operation
	API20SkusIDPutPackHandler api_2_0.SkusIDPutPackHandler
	// API20SkusPatchHandler sets the operation handler for the skus patch operation
	API20SkusPatchHandler api_2_0.SkusPatchHandler
	// API20SkusPostHandler sets the operation handler for the skus post operation
	API20SkusPostHandler api_2_0.SkusPostHandler
	// API20SkusPutHandler sets the operation handler for the skus put operation
	API20SkusPutHandler api_2_0.SkusPutHandler
	// API20TaskSchemasGetHandler sets the operation handler for the task schemas get operation
	API20TaskSchemasGetHandler api_2_0.TaskSchemasGetHandler
	// API20TaskSchemasIDGetHandler sets the operation handler for the task schemas Id get operation
	API20TaskSchemasIDGetHandler api_2_0.TaskSchemasIDGetHandler
	// API20TemplatesGetByNameHandler sets the operation handler for the templates get by name operation
	API20TemplatesGetByNameHandler api_2_0.TemplatesGetByNameHandler
	// API20TemplatesHeadByNameHandler sets the operation handler for the templates head by name operation
	API20TemplatesHeadByNameHandler api_2_0.TemplatesHeadByNameHandler
	// API20TemplatesLibDeleteHandler sets the operation handler for the templates lib delete operation
	API20TemplatesLibDeleteHandler api_2_0.TemplatesLibDeleteHandler
	// API20TemplatesLibGetHandler sets the operation handler for the templates lib get operation
	API20TemplatesLibGetHandler api_2_0.TemplatesLibGetHandler
	// API20TemplatesLibPutHandler sets the operation handler for the templates lib put operation
	API20TemplatesLibPutHandler api_2_0.TemplatesLibPutHandler
	// API20TemplatesMetaGetHandler sets the operation handler for the templates meta get operation
	API20TemplatesMetaGetHandler api_2_0.TemplatesMetaGetHandler
	// API20TemplatesMetaGetByNameHandler sets the operation handler for the templates meta get by name operation
	API20TemplatesMetaGetByNameHandler api_2_0.TemplatesMetaGetByNameHandler
	// API20ViewsDeleteHandler sets the operation handler for the views delete operation
	API20ViewsDeleteHandler api_2_0.ViewsDeleteHandler
	// API20ViewsGetHandler sets the operation handler for the views get operation
	API20ViewsGetHandler api_2_0.ViewsGetHandler
	// API20ViewsGetByIDHandler sets the operation handler for the views get by Id operation
	API20ViewsGetByIDHandler api_2_0.ViewsGetByIDHandler
	// API20ViewsPutHandler sets the operation handler for the views put operation
	API20ViewsPutHandler api_2_0.ViewsPutHandler
	// API20WorkflowsActionHandler sets the operation handler for the workflows action operation
	API20WorkflowsActionHandler api_2_0.WorkflowsActionHandler
	// API20WorkflowsDeleteByInstanceIDHandler sets the operation handler for the workflows delete by instance Id operation
	API20WorkflowsDeleteByInstanceIDHandler api_2_0.WorkflowsDeleteByInstanceIDHandler
	// API20WorkflowsDeleteGraphsByNameHandler sets the operation handler for the workflows delete graphs by name operation
	API20WorkflowsDeleteGraphsByNameHandler api_2_0.WorkflowsDeleteGraphsByNameHandler
	// API20WorkflowsDeleteTasksByNameHandler sets the operation handler for the workflows delete tasks by name operation
	API20WorkflowsDeleteTasksByNameHandler api_2_0.WorkflowsDeleteTasksByNameHandler
	// API20WorkflowsGetHandler sets the operation handler for the workflows get operation
	API20WorkflowsGetHandler api_2_0.WorkflowsGetHandler
	// API20WorkflowsGetAllTasksHandler sets the operation handler for the workflows get all tasks operation
	API20WorkflowsGetAllTasksHandler api_2_0.WorkflowsGetAllTasksHandler
	// API20WorkflowsGetByInstanceIDHandler sets the operation handler for the workflows get by instance Id operation
	API20WorkflowsGetByInstanceIDHandler api_2_0.WorkflowsGetByInstanceIDHandler
	// API20WorkflowsGetGraphsHandler sets the operation handler for the workflows get graphs operation
	API20WorkflowsGetGraphsHandler api_2_0.WorkflowsGetGraphsHandler
	// API20WorkflowsGetGraphsByNameHandler sets the operation handler for the workflows get graphs by name operation
	API20WorkflowsGetGraphsByNameHandler api_2_0.WorkflowsGetGraphsByNameHandler
	// API20WorkflowsGetTasksByNameHandler sets the operation handler for the workflows get tasks by name operation
	API20WorkflowsGetTasksByNameHandler api_2_0.WorkflowsGetTasksByNameHandler
	// API20WorkflowsPostHandler sets the operation handler for the workflows post operation
	API20WorkflowsPostHandler api_2_0.WorkflowsPostHandler
	// API20WorkflowsPutGraphsHandler sets the operation handler for the workflows put graphs operation
	API20WorkflowsPutGraphsHandler api_2_0.WorkflowsPutGraphsHandler
	// API20WorkflowsPutTaskHandler sets the operation handler for the workflows put task operation
	API20WorkflowsPutTaskHandler api_2_0.WorkflowsPutTaskHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *RackHD20API) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *RackHD20API) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *RackHD20API) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *RackHD20API) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *RackHD20API) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *RackHD20API) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *RackHD20API) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the RackHD20API
func (o *RackHD20API) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.MultipartformConsumer == nil {
		unregistered = append(unregistered, "MultipartformConsumer")
	}

	if o.TxtConsumer == nil {
		unregistered = append(unregistered, "TxtConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.API20AddRoleHandler == nil {
		unregistered = append(unregistered, "api_2_0.AddRoleHandler")
	}

	if o.API20AddUserHandler == nil {
		unregistered = append(unregistered, "api_2_0.AddUserHandler")
	}

	if o.API20CatalogsGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.CatalogsGetHandler")
	}

	if o.API20CatalogsIDGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.CatalogsIDGetHandler")
	}

	if o.API20ConfigGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.ConfigGetHandler")
	}

	if o.API20ConfigPatchHandler == nil {
		unregistered = append(unregistered, "api_2_0.ConfigPatchHandler")
	}

	if o.API20CreateTagHandler == nil {
		unregistered = append(unregistered, "api_2_0.CreateTagHandler")
	}

	if o.API20DeleteTagHandler == nil {
		unregistered = append(unregistered, "api_2_0.DeleteTagHandler")
	}

	if o.API20FilesDeleteHandler == nil {
		unregistered = append(unregistered, "api_2_0.FilesDeleteHandler")
	}

	if o.API20FilesGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.FilesGetHandler")
	}

	if o.API20FilesGetAllHandler == nil {
		unregistered = append(unregistered, "api_2_0.FilesGetAllHandler")
	}

	if o.API20FilesMd5GetHandler == nil {
		unregistered = append(unregistered, "api_2_0.FilesMd5GetHandler")
	}

	if o.API20FilesMetadataGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.FilesMetadataGetHandler")
	}

	if o.API20FilesPutHandler == nil {
		unregistered = append(unregistered, "api_2_0.FilesPutHandler")
	}

	if o.API20GetAllTagsHandler == nil {
		unregistered = append(unregistered, "api_2_0.GetAllTagsHandler")
	}

	if o.API20GetBootstrapHandler == nil {
		unregistered = append(unregistered, "api_2_0.GetBootstrapHandler")
	}

	if o.API20GetNodesByTagHandler == nil {
		unregistered = append(unregistered, "api_2_0.GetNodesByTagHandler")
	}

	if o.API20GetRoleHandler == nil {
		unregistered = append(unregistered, "api_2_0.GetRoleHandler")
	}

	if o.API20GetTagHandler == nil {
		unregistered = append(unregistered, "api_2_0.GetTagHandler")
	}

	if o.API20GetTasksByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.GetTasksByIDHandler")
	}

	if o.API20GetUserHandler == nil {
		unregistered = append(unregistered, "api_2_0.GetUserHandler")
	}

	if o.API20ListRolesHandler == nil {
		unregistered = append(unregistered, "api_2_0.ListRolesHandler")
	}

	if o.API20ListUsersHandler == nil {
		unregistered = append(unregistered, "api_2_0.ListUsersHandler")
	}

	if o.API20LookupsDelByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.LookupsDelByIDHandler")
	}

	if o.API20LookupsGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.LookupsGetHandler")
	}

	if o.API20LookupsGetByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.LookupsGetByIDHandler")
	}

	if o.API20LookupsPatchByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.LookupsPatchByIDHandler")
	}

	if o.API20LookupsPostHandler == nil {
		unregistered = append(unregistered, "api_2_0.LookupsPostHandler")
	}

	if o.API20ModifyRoleHandler == nil {
		unregistered = append(unregistered, "api_2_0.ModifyRoleHandler")
	}

	if o.API20ModifyUserHandler == nil {
		unregistered = append(unregistered, "api_2_0.ModifyUserHandler")
	}

	if o.API20NodesAddRelationsHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesAddRelationsHandler")
	}

	if o.API20NodesDelByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesDelByIDHandler")
	}

	if o.API20NodesDelRelationsHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesDelRelationsHandler")
	}

	if o.API20NodesDelTagByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesDelTagByIDHandler")
	}

	if o.API20NodesGetAllHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetAllHandler")
	}

	if o.API20NodesGetByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetByIDHandler")
	}

	if o.API20NodesGetCatalogByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetCatalogByIDHandler")
	}

	if o.API20NodesGetCatalogSourceByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetCatalogSourceByIDHandler")
	}

	if o.API20NodesGetObmsByNodeIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetObmsByNodeIDHandler")
	}

	if o.API20NodesGetPollersByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetPollersByIDHandler")
	}

	if o.API20NodesGetRelationsHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetRelationsHandler")
	}

	if o.API20NodesGetSSHByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetSSHByIDHandler")
	}

	if o.API20NodesGetTagsByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetTagsByIDHandler")
	}

	if o.API20NodesGetWorkflowByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesGetWorkflowByIDHandler")
	}

	if o.API20NodesMasterDelTagByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesMasterDelTagByIDHandler")
	}

	if o.API20NodesPatchByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesPatchByIDHandler")
	}

	if o.API20NodesPatchTagByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesPatchTagByIDHandler")
	}

	if o.API20NodesPostHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesPostHandler")
	}

	if o.API20NodesPostSSHByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesPostSSHByIDHandler")
	}

	if o.API20NodesPostWorkflowByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesPostWorkflowByIDHandler")
	}

	if o.API20NodesPutObmsByNodeIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesPutObmsByNodeIDHandler")
	}

	if o.API20NodesWorkflowActionByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.NodesWorkflowActionByIDHandler")
	}

	if o.API20ObmsDefinitionsGetAllHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsDefinitionsGetAllHandler")
	}

	if o.API20ObmsDefinitionsGetByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsDefinitionsGetByNameHandler")
	}

	if o.API20ObmsDeleteByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsDeleteByIDHandler")
	}

	if o.API20ObmsGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsGetHandler")
	}

	if o.API20ObmsGetByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsGetByIDHandler")
	}

	if o.API20ObmsPatchByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsPatchByIDHandler")
	}

	if o.API20ObmsPostLedHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsPostLedHandler")
	}

	if o.API20ObmsPutHandler == nil {
		unregistered = append(unregistered, "api_2_0.ObmsPutHandler")
	}

	if o.API20PollersCurrentDataGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersCurrentDataGetHandler")
	}

	if o.API20PollersDataGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersDataGetHandler")
	}

	if o.API20PollersDeleteHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersDeleteHandler")
	}

	if o.API20PollersGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersGetHandler")
	}

	if o.API20PollersIDGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersIDGetHandler")
	}

	if o.API20PollersLibByIDGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersLibByIDGetHandler")
	}

	if o.API20PollersLibGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersLibGetHandler")
	}

	if o.API20PollersPatchHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersPatchHandler")
	}

	if o.API20PollersPostHandler == nil {
		unregistered = append(unregistered, "api_2_0.PollersPostHandler")
	}

	if o.API20PostTaskByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.PostTaskByIDHandler")
	}

	if o.API20PostWorkflowByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.PostWorkflowByIDHandler")
	}

	if o.API20ProfilesGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.ProfilesGetHandler")
	}

	if o.API20ProfilesGetLibByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.ProfilesGetLibByNameHandler")
	}

	if o.API20ProfilesGetMetadataHandler == nil {
		unregistered = append(unregistered, "api_2_0.ProfilesGetMetadataHandler")
	}

	if o.API20ProfilesGetMetadataByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.ProfilesGetMetadataByNameHandler")
	}

	if o.API20ProfilesGetSwitchVendorHandler == nil {
		unregistered = append(unregistered, "api_2_0.ProfilesGetSwitchVendorHandler")
	}

	if o.API20ProfilesPostSwitchErrorHandler == nil {
		unregistered = append(unregistered, "api_2_0.ProfilesPostSwitchErrorHandler")
	}

	if o.API20ProfilesPutLibByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.ProfilesPutLibByNameHandler")
	}

	if o.API20RemoveRoleHandler == nil {
		unregistered = append(unregistered, "api_2_0.RemoveRoleHandler")
	}

	if o.API20RemoveUserHandler == nil {
		unregistered = append(unregistered, "api_2_0.RemoveUserHandler")
	}

	if o.API20SchemasGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.SchemasGetHandler")
	}

	if o.API20SchemasIDGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.SchemasIDGetHandler")
	}

	if o.API20SkuPackPostHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkuPackPostHandler")
	}

	if o.API20SkusGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusGetHandler")
	}

	if o.API20SkusIDDeleteHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusIDDeleteHandler")
	}

	if o.API20SkusIDDeletePackHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusIDDeletePackHandler")
	}

	if o.API20SkusIDGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusIDGetHandler")
	}

	if o.API20SkusIDGetNodesHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusIDGetNodesHandler")
	}

	if o.API20SkusIDPutPackHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusIDPutPackHandler")
	}

	if o.API20SkusPatchHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusPatchHandler")
	}

	if o.API20SkusPostHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusPostHandler")
	}

	if o.API20SkusPutHandler == nil {
		unregistered = append(unregistered, "api_2_0.SkusPutHandler")
	}

	if o.API20TaskSchemasGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.TaskSchemasGetHandler")
	}

	if o.API20TaskSchemasIDGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.TaskSchemasIDGetHandler")
	}

	if o.API20TemplatesGetByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.TemplatesGetByNameHandler")
	}

	if o.API20TemplatesHeadByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.TemplatesHeadByNameHandler")
	}

	if o.API20TemplatesLibDeleteHandler == nil {
		unregistered = append(unregistered, "api_2_0.TemplatesLibDeleteHandler")
	}

	if o.API20TemplatesLibGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.TemplatesLibGetHandler")
	}

	if o.API20TemplatesLibPutHandler == nil {
		unregistered = append(unregistered, "api_2_0.TemplatesLibPutHandler")
	}

	if o.API20TemplatesMetaGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.TemplatesMetaGetHandler")
	}

	if o.API20TemplatesMetaGetByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.TemplatesMetaGetByNameHandler")
	}

	if o.API20ViewsDeleteHandler == nil {
		unregistered = append(unregistered, "api_2_0.ViewsDeleteHandler")
	}

	if o.API20ViewsGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.ViewsGetHandler")
	}

	if o.API20ViewsGetByIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.ViewsGetByIDHandler")
	}

	if o.API20ViewsPutHandler == nil {
		unregistered = append(unregistered, "api_2_0.ViewsPutHandler")
	}

	if o.API20WorkflowsActionHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsActionHandler")
	}

	if o.API20WorkflowsDeleteByInstanceIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsDeleteByInstanceIDHandler")
	}

	if o.API20WorkflowsDeleteGraphsByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsDeleteGraphsByNameHandler")
	}

	if o.API20WorkflowsDeleteTasksByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsDeleteTasksByNameHandler")
	}

	if o.API20WorkflowsGetHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsGetHandler")
	}

	if o.API20WorkflowsGetAllTasksHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsGetAllTasksHandler")
	}

	if o.API20WorkflowsGetByInstanceIDHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsGetByInstanceIDHandler")
	}

	if o.API20WorkflowsGetGraphsHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsGetGraphsHandler")
	}

	if o.API20WorkflowsGetGraphsByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsGetGraphsByNameHandler")
	}

	if o.API20WorkflowsGetTasksByNameHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsGetTasksByNameHandler")
	}

	if o.API20WorkflowsPostHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsPostHandler")
	}

	if o.API20WorkflowsPutGraphsHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsPutGraphsHandler")
	}

	if o.API20WorkflowsPutTaskHandler == nil {
		unregistered = append(unregistered, "api_2_0.WorkflowsPutTaskHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *RackHD20API) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *RackHD20API) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *RackHD20API) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/octet-stream":
			result["application/octet-stream"] = o.BinConsumer

		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer

		case "multipart/form-data":
			result["multipart/form-data"] = o.MultipartformConsumer

		case "text/plain":
			result["text/plain"] = o.TxtConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *RackHD20API) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *RackHD20API) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the rack h d20 API
func (o *RackHD20API) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *RackHD20API) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/roles"] = api_2_0.NewAddRole(o.context, o.API20AddRoleHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = api_2_0.NewAddUser(o.context, o.API20AddUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/catalogs"] = api_2_0.NewCatalogsGet(o.context, o.API20CatalogsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/catalogs/{identifier}"] = api_2_0.NewCatalogsIDGet(o.context, o.API20CatalogsIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/config"] = api_2_0.NewConfigGet(o.context, o.API20ConfigGetHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/config"] = api_2_0.NewConfigPatch(o.context, o.API20ConfigPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tags"] = api_2_0.NewCreateTag(o.context, o.API20CreateTagHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tags/{tagName}"] = api_2_0.NewDeleteTag(o.context, o.API20DeleteTagHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/files/{fileidentifier}"] = api_2_0.NewFilesDelete(o.context, o.API20FilesDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/{fileidentifier}"] = api_2_0.NewFilesGet(o.context, o.API20FilesGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files"] = api_2_0.NewFilesGetAll(o.context, o.API20FilesGetAllHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/{filename}/md5"] = api_2_0.NewFilesMd5Get(o.context, o.API20FilesMd5GetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/files/{filename}/metadata"] = api_2_0.NewFilesMetadataGet(o.context, o.API20FilesMetadataGetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/files/{fileidentifier}"] = api_2_0.NewFilesPut(o.context, o.API20FilesPutHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags"] = api_2_0.NewGetAllTags(o.context, o.API20GetAllTagsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tasks/bootstrap.js"] = api_2_0.NewGetBootstrap(o.context, o.API20GetBootstrapHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags/{tagName}/nodes"] = api_2_0.NewGetNodesByTag(o.context, o.API20GetNodesByTagHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles/{name}"] = api_2_0.NewGetRole(o.context, o.API20GetRoleHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tags/{tagName}"] = api_2_0.NewGetTag(o.context, o.API20GetTagHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tasks/{identifier}"] = api_2_0.NewGetTasksByID(o.context, o.API20GetTasksByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{name}"] = api_2_0.NewGetUser(o.context, o.API20GetUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles"] = api_2_0.NewListRoles(o.context, o.API20ListRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = api_2_0.NewListUsers(o.context, o.API20ListUsersHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/lookups/{id}"] = api_2_0.NewLookupsDelByID(o.context, o.API20LookupsDelByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lookups"] = api_2_0.NewLookupsGet(o.context, o.API20LookupsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/lookups/{id}"] = api_2_0.NewLookupsGetByID(o.context, o.API20LookupsGetByIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/lookups/{id}"] = api_2_0.NewLookupsPatchByID(o.context, o.API20LookupsPatchByIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/lookups"] = api_2_0.NewLookupsPost(o.context, o.API20LookupsPostHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/roles/{name}"] = api_2_0.NewModifyRole(o.context, o.API20ModifyRoleHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/{name}"] = api_2_0.NewModifyUser(o.context, o.API20ModifyUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nodes/{identifier}/relations"] = api_2_0.NewNodesAddRelations(o.context, o.API20NodesAddRelationsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nodes/{identifier}"] = api_2_0.NewNodesDelByID(o.context, o.API20NodesDelByIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nodes/{identifier}/relations"] = api_2_0.NewNodesDelRelations(o.context, o.API20NodesDelRelationsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nodes/{identifier}/tags/{tagName}"] = api_2_0.NewNodesDelTagByID(o.context, o.API20NodesDelTagByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes"] = api_2_0.NewNodesGetAll(o.context, o.API20NodesGetAllHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}"] = api_2_0.NewNodesGetByID(o.context, o.API20NodesGetByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/catalogs"] = api_2_0.NewNodesGetCatalogByID(o.context, o.API20NodesGetCatalogByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/catalogs/{source}"] = api_2_0.NewNodesGetCatalogSourceByID(o.context, o.API20NodesGetCatalogSourceByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/obm"] = api_2_0.NewNodesGetObmsByNodeID(o.context, o.API20NodesGetObmsByNodeIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/pollers"] = api_2_0.NewNodesGetPollersByID(o.context, o.API20NodesGetPollersByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/relations"] = api_2_0.NewNodesGetRelations(o.context, o.API20NodesGetRelationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/ssh"] = api_2_0.NewNodesGetSSHByID(o.context, o.API20NodesGetSSHByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/tags"] = api_2_0.NewNodesGetTagsByID(o.context, o.API20NodesGetTagsByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/nodes/{identifier}/workflows"] = api_2_0.NewNodesGetWorkflowByID(o.context, o.API20NodesGetWorkflowByIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/nodes/tags/{tagName}"] = api_2_0.NewNodesMasterDelTagByID(o.context, o.API20NodesMasterDelTagByIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/nodes/{identifier}"] = api_2_0.NewNodesPatchByID(o.context, o.API20NodesPatchByIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/nodes/{identifier}/tags"] = api_2_0.NewNodesPatchTagByID(o.context, o.API20NodesPatchTagByIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nodes"] = api_2_0.NewNodesPost(o.context, o.API20NodesPostHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nodes/{identifier}/ssh"] = api_2_0.NewNodesPostSSHByID(o.context, o.API20NodesPostSSHByIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/nodes/{identifier}/workflows"] = api_2_0.NewNodesPostWorkflowByID(o.context, o.API20NodesPostWorkflowByIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nodes/{identifier}/obm"] = api_2_0.NewNodesPutObmsByNodeID(o.context, o.API20NodesPutObmsByNodeIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/nodes/{identifier}/workflows/action"] = api_2_0.NewNodesWorkflowActionByID(o.context, o.API20NodesWorkflowActionByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/obms/definitions"] = api_2_0.NewObmsDefinitionsGetAll(o.context, o.API20ObmsDefinitionsGetAllHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/obms/definitions/{name}"] = api_2_0.NewObmsDefinitionsGetByName(o.context, o.API20ObmsDefinitionsGetByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/obms/{identifier}"] = api_2_0.NewObmsDeleteByID(o.context, o.API20ObmsDeleteByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/obms"] = api_2_0.NewObmsGet(o.context, o.API20ObmsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/obms/{identifier}"] = api_2_0.NewObmsGetByID(o.context, o.API20ObmsGetByIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/obms/{identifier}"] = api_2_0.NewObmsPatchByID(o.context, o.API20ObmsPatchByIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/obms/led"] = api_2_0.NewObmsPostLed(o.context, o.API20ObmsPostLedHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/obms"] = api_2_0.NewObmsPut(o.context, o.API20ObmsPutHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pollers/{identifier}/data/current"] = api_2_0.NewPollersCurrentDataGet(o.context, o.API20PollersCurrentDataGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pollers/{identifier}/data"] = api_2_0.NewPollersDataGet(o.context, o.API20PollersDataGetHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/pollers/{identifier}"] = api_2_0.NewPollersDelete(o.context, o.API20PollersDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pollers"] = api_2_0.NewPollersGet(o.context, o.API20PollersGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pollers/{identifier}"] = api_2_0.NewPollersIDGet(o.context, o.API20PollersIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pollers/library/{identifier}"] = api_2_0.NewPollersLibByIDGet(o.context, o.API20PollersLibByIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pollers/library"] = api_2_0.NewPollersLibGet(o.context, o.API20PollersLibGetHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/pollers/{identifier}"] = api_2_0.NewPollersPatch(o.context, o.API20PollersPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/pollers"] = api_2_0.NewPollersPost(o.context, o.API20PollersPostHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tasks/{identifier}"] = api_2_0.NewPostTaskByID(o.context, o.API20PostTaskByIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tags/{tagName}/nodes/workflows"] = api_2_0.NewPostWorkflowByID(o.context, o.API20PostWorkflowByIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles"] = api_2_0.NewProfilesGet(o.context, o.API20ProfilesGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles/library/{name}"] = api_2_0.NewProfilesGetLibByName(o.context, o.API20ProfilesGetLibByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles/metadata"] = api_2_0.NewProfilesGetMetadata(o.context, o.API20ProfilesGetMetadataHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles/metadata/{name}"] = api_2_0.NewProfilesGetMetadataByName(o.context, o.API20ProfilesGetMetadataByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/profiles/switch/{vendor}"] = api_2_0.NewProfilesGetSwitchVendor(o.context, o.API20ProfilesGetSwitchVendorHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/profiles/switch/error"] = api_2_0.NewProfilesPostSwitchError(o.context, o.API20ProfilesPostSwitchErrorHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/profiles/library/{name}"] = api_2_0.NewProfilesPutLibByName(o.context, o.API20ProfilesPutLibByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/roles/{name}"] = api_2_0.NewRemoveRole(o.context, o.API20RemoveRoleHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{name}"] = api_2_0.NewRemoveUser(o.context, o.API20RemoveUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas"] = api_2_0.NewSchemasGet(o.context, o.API20SchemasGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/{identifier}"] = api_2_0.NewSchemasIDGet(o.context, o.API20SchemasIDGetHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/skus/pack"] = api_2_0.NewSkuPackPost(o.context, o.API20SkuPackPostHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/skus"] = api_2_0.NewSkusGet(o.context, o.API20SkusGetHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/skus/{identifier}"] = api_2_0.NewSkusIDDelete(o.context, o.API20SkusIDDeleteHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/skus/{identifier}/pack"] = api_2_0.NewSkusIDDeletePack(o.context, o.API20SkusIDDeletePackHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/skus/{identifier}"] = api_2_0.NewSkusIDGet(o.context, o.API20SkusIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/skus/{identifier}/nodes"] = api_2_0.NewSkusIDGetNodes(o.context, o.API20SkusIDGetNodesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/skus/{identifier}/pack"] = api_2_0.NewSkusIDPutPack(o.context, o.API20SkusIDPutPackHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers[strings.ToUpper("PATCH")] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/skus/{identifier}"] = api_2_0.NewSkusPatch(o.context, o.API20SkusPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/skus"] = api_2_0.NewSkusPost(o.context, o.API20SkusPostHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/skus"] = api_2_0.NewSkusPut(o.context, o.API20SkusPutHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/tasks"] = api_2_0.NewTaskSchemasGet(o.context, o.API20TaskSchemasGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schemas/tasks/{identifier}"] = api_2_0.NewTaskSchemasIDGet(o.context, o.API20TaskSchemasIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates/{name}"] = api_2_0.NewTemplatesGetByName(o.context, o.API20TemplatesGetByNameHandler)

	if o.handlers["HEAD"] == nil {
		o.handlers[strings.ToUpper("HEAD")] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/templates/{name}"] = api_2_0.NewTemplatesHeadByName(o.context, o.API20TemplatesHeadByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/templates/library/{name}"] = api_2_0.NewTemplatesLibDelete(o.context, o.API20TemplatesLibDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates/library/{name}"] = api_2_0.NewTemplatesLibGet(o.context, o.API20TemplatesLibGetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/templates/library/{name}"] = api_2_0.NewTemplatesLibPut(o.context, o.API20TemplatesLibPutHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates/metadata"] = api_2_0.NewTemplatesMetaGet(o.context, o.API20TemplatesMetaGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/templates/metadata/{name}"] = api_2_0.NewTemplatesMetaGetByName(o.context, o.API20TemplatesMetaGetByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/views/{identifier}"] = api_2_0.NewViewsDelete(o.context, o.API20ViewsDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/views"] = api_2_0.NewViewsGet(o.context, o.API20ViewsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/views/{identifier}"] = api_2_0.NewViewsGetByID(o.context, o.API20ViewsGetByIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/views/{identifier}"] = api_2_0.NewViewsPut(o.context, o.API20ViewsPutHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/workflows/{identifier}/action"] = api_2_0.NewWorkflowsAction(o.context, o.API20WorkflowsActionHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workflows/{identifier}"] = api_2_0.NewWorkflowsDeleteByInstanceID(o.context, o.API20WorkflowsDeleteByInstanceIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workflows/graphs/{injectableName}"] = api_2_0.NewWorkflowsDeleteGraphsByName(o.context, o.API20WorkflowsDeleteGraphsByNameHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers[strings.ToUpper("DELETE")] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/workflows/tasks/{injectableName}"] = api_2_0.NewWorkflowsDeleteTasksByName(o.context, o.API20WorkflowsDeleteTasksByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows"] = api_2_0.NewWorkflowsGet(o.context, o.API20WorkflowsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows/tasks"] = api_2_0.NewWorkflowsGetAllTasks(o.context, o.API20WorkflowsGetAllTasksHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows/{identifier}"] = api_2_0.NewWorkflowsGetByInstanceID(o.context, o.API20WorkflowsGetByInstanceIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows/graphs"] = api_2_0.NewWorkflowsGetGraphs(o.context, o.API20WorkflowsGetGraphsHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows/graphs/{injectableName}"] = api_2_0.NewWorkflowsGetGraphsByName(o.context, o.API20WorkflowsGetGraphsByNameHandler)

	if o.handlers["GET"] == nil {
		o.handlers[strings.ToUpper("GET")] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/workflows/tasks/{injectableName}"] = api_2_0.NewWorkflowsGetTasksByName(o.context, o.API20WorkflowsGetTasksByNameHandler)

	if o.handlers["POST"] == nil {
		o.handlers[strings.ToUpper("POST")] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/workflows"] = api_2_0.NewWorkflowsPost(o.context, o.API20WorkflowsPostHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/workflows/graphs"] = api_2_0.NewWorkflowsPutGraphs(o.context, o.API20WorkflowsPutGraphsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers[strings.ToUpper("PUT")] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/workflows/tasks"] = api_2_0.NewWorkflowsPutTask(o.context, o.API20WorkflowsPutTaskHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *RackHD20API) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *RackHD20API) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
