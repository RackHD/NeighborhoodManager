package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/swagger/models"
)

/*ViewsGetOK Successfully retrieved views

swagger:response viewsGetOK
*/
type ViewsGetOK struct {

	// In: body
	Payload ViewsGetOKBody `json:"body,omitempty"`
}

// NewViewsGetOK creates ViewsGetOK with default headers values
func NewViewsGetOK() *ViewsGetOK {
	return &ViewsGetOK{}
}

// WithPayload adds the payload to the views get o k response
func (o *ViewsGetOK) WithPayload(payload ViewsGetOKBody) *ViewsGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the views get o k response
func (o *ViewsGetOK) SetPayload(payload ViewsGetOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ViewsGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*ViewsGetDefault Unexpected error

swagger:response viewsGetDefault
*/
type ViewsGetDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewViewsGetDefault creates ViewsGetDefault with default headers values
func NewViewsGetDefault(code int) *ViewsGetDefault {
	if code <= 0 {
		code = 500
	}

	return &ViewsGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the views get default response
func (o *ViewsGetDefault) WithStatusCode(code int) *ViewsGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the views get default response
func (o *ViewsGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the views get default response
func (o *ViewsGetDefault) WithPayload(payload *models.Error) *ViewsGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the views get default response
func (o *ViewsGetDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ViewsGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
