package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SkusGetHandlerFunc turns a function with the right signature into a skus get handler
type SkusGetHandlerFunc func(SkusGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SkusGetHandlerFunc) Handle(params SkusGetParams) middleware.Responder {
	return fn(params)
}

// SkusGetHandler interface for that can handle valid skus get params
type SkusGetHandler interface {
	Handle(SkusGetParams) middleware.Responder
}

// NewSkusGet creates a new http.Handler for the skus get operation
func NewSkusGet(ctx *middleware.Context, handler SkusGetHandler) *SkusGet {
	return &SkusGet{Context: ctx, Handler: handler}
}

/*SkusGet swagger:route GET /skus /api/2.0 skusGet

Get list of SKUs

Get list of currently defined SKUs, which are used to group nodes based on matching a set of rules with information present in a nodes catalog.


*/
type SkusGet struct {
	Context *middleware.Context
	Handler SkusGetHandler
}

func (o *SkusGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewSkusGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SkusGetOKBody skus get o k body
// swagger:model SkusGetOKBody
type SkusGetOKBody interface{}
