package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// WorkflowsPostHandlerFunc turns a function with the right signature into a workflows post handler
type WorkflowsPostHandlerFunc func(WorkflowsPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn WorkflowsPostHandlerFunc) Handle(params WorkflowsPostParams) middleware.Responder {
	return fn(params)
}

// WorkflowsPostHandler interface for that can handle valid workflows post params
type WorkflowsPostHandler interface {
	Handle(WorkflowsPostParams) middleware.Responder
}

// NewWorkflowsPost creates a new http.Handler for the workflows post operation
func NewWorkflowsPost(ctx *middleware.Context, handler WorkflowsPostHandler) *WorkflowsPost {
	return &WorkflowsPost{Context: ctx, Handler: handler}
}

/*WorkflowsPost swagger:route POST /workflows /api/2.0 workflowsPost

Run a workflow

Run a workflow by specifying a workflow graph injectable name. The workflow is not associated with a node.


*/
type WorkflowsPost struct {
	Context *middleware.Context
	Handler WorkflowsPostHandler
}

func (o *WorkflowsPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewWorkflowsPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// WorkflowsPostCreatedBody workflows post created body
// swagger:model WorkflowsPostCreatedBody
type WorkflowsPostCreatedBody interface{}
