package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TaskSchemasGetHandlerFunc turns a function with the right signature into a task schemas get handler
type TaskSchemasGetHandlerFunc func(TaskSchemasGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TaskSchemasGetHandlerFunc) Handle(params TaskSchemasGetParams) middleware.Responder {
	return fn(params)
}

// TaskSchemasGetHandler interface for that can handle valid task schemas get params
type TaskSchemasGetHandler interface {
	Handle(TaskSchemasGetParams) middleware.Responder
}

// NewTaskSchemasGet creates a new http.Handler for the task schemas get operation
func NewTaskSchemasGet(ctx *middleware.Context, handler TaskSchemasGetHandler) *TaskSchemasGet {
	return &TaskSchemasGet{Context: ctx, Handler: handler}
}

/*TaskSchemasGet swagger:route GET /schemas/tasks /api/2.0 taskSchemasGet

Get all task schemas names

Get a list of all task schema names currently stored in the system.

*/
type TaskSchemasGet struct {
	Context *middleware.Context
	Handler TaskSchemasGetHandler
}

func (o *TaskSchemasGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTaskSchemasGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TaskSchemasGetOKBody task schemas get o k body
// swagger:model TaskSchemasGetOKBody
type TaskSchemasGetOKBody interface{}
