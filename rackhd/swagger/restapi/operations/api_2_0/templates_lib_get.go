package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TemplatesLibGetHandlerFunc turns a function with the right signature into a templates lib get handler
type TemplatesLibGetHandlerFunc func(TemplatesLibGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TemplatesLibGetHandlerFunc) Handle(params TemplatesLibGetParams) middleware.Responder {
	return fn(params)
}

// TemplatesLibGetHandler interface for that can handle valid templates lib get params
type TemplatesLibGetHandler interface {
	Handle(TemplatesLibGetParams) middleware.Responder
}

// NewTemplatesLibGet creates a new http.Handler for the templates lib get operation
func NewTemplatesLibGet(ctx *middleware.Context, handler TemplatesLibGetHandler) *TemplatesLibGet {
	return &TemplatesLibGet{Context: ctx, Handler: handler}
}

/*TemplatesLibGet swagger:route GET /templates/library/{name} /api/2.0 templatesLibGet

Get a single template

Get the contents of a single template file.

*/
type TemplatesLibGet struct {
	Context *middleware.Context
	Handler TemplatesLibGetHandler
}

func (o *TemplatesLibGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTemplatesLibGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TemplatesLibGetOKBody templates lib get o k body
// swagger:model TemplatesLibGetOKBody
type TemplatesLibGetOKBody interface{}
