package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TemplatesMetaGetHandlerFunc turns a function with the right signature into a templates meta get handler
type TemplatesMetaGetHandlerFunc func(TemplatesMetaGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TemplatesMetaGetHandlerFunc) Handle(params TemplatesMetaGetParams) middleware.Responder {
	return fn(params)
}

// TemplatesMetaGetHandler interface for that can handle valid templates meta get params
type TemplatesMetaGetHandler interface {
	Handle(TemplatesMetaGetParams) middleware.Responder
}

// NewTemplatesMetaGet creates a new http.Handler for the templates meta get operation
func NewTemplatesMetaGet(ctx *middleware.Context, handler TemplatesMetaGetHandler) *TemplatesMetaGet {
	return &TemplatesMetaGet{Context: ctx, Handler: handler}
}

/*TemplatesMetaGet swagger:route GET /templates/metadata /api/2.0 templatesMetaGet

Get a list of metadata for all templates

Retrieves metadata for each defined template. The metadata includes the template name, and scope, not the actual contents of the template.


*/
type TemplatesMetaGet struct {
	Context *middleware.Context
	Handler TemplatesMetaGetHandler
}

func (o *TemplatesMetaGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTemplatesMetaGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TemplatesMetaGetOKBody templates meta get o k body
// swagger:model TemplatesMetaGetOKBody
type TemplatesMetaGetOKBody interface{}
