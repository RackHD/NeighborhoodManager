package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FilesMd5GetHandlerFunc turns a function with the right signature into a files md5 get handler
type FilesMd5GetHandlerFunc func(FilesMd5GetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FilesMd5GetHandlerFunc) Handle(params FilesMd5GetParams) middleware.Responder {
	return fn(params)
}

// FilesMd5GetHandler interface for that can handle valid files md5 get params
type FilesMd5GetHandler interface {
	Handle(FilesMd5GetParams) middleware.Responder
}

// NewFilesMd5Get creates a new http.Handler for the files md5 get operation
func NewFilesMd5Get(ctx *middleware.Context, handler FilesMd5GetHandler) *FilesMd5Get {
	return &FilesMd5Get{Context: ctx, Handler: handler}
}

/*FilesMd5Get swagger:route GET /files/{filename}/md5 /api/2.0 filesMd5Get

Get md5sum of file

Get md5sum based on file name.

*/
type FilesMd5Get struct {
	Context *middleware.Context
	Handler FilesMd5GetHandler
}

func (o *FilesMd5Get) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewFilesMd5GetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// FilesMd5GetOKBody files md5 get o k body
// swagger:model FilesMd5GetOKBody
type FilesMd5GetOKBody interface{}
