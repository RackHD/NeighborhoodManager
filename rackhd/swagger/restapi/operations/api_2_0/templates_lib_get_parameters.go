package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTemplatesLibGetParams creates a new TemplatesLibGetParams object
// with the default values initialized.
func NewTemplatesLibGetParams() TemplatesLibGetParams {
	var (
		scopeDefault = string("global")
	)
	return TemplatesLibGetParams{
		Scope: &scopeDefault,
	}
}

// TemplatesLibGetParams contains all the bound params for the templates lib get operation
// typically these are obtained from a http.Request
//
// swagger:parameters templatesLibGet
type TemplatesLibGetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*The file name of the template
	  Required: true
	  In: path
	*/
	Name string
	/*The template scope
	  In: query
	  Default: "global"
	*/
	Scope *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *TemplatesLibGetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rName, rhkName, _ := route.Params.GetOK("name")
	if err := o.bindName(rName, rhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qScope, qhkScope, _ := qs.GetOK("scope")
	if err := o.bindScope(qScope, qhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TemplatesLibGetParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Name = raw

	return nil
}

func (o *TemplatesLibGetParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var scopeDefault string = string("global")
		o.Scope = &scopeDefault
		return nil
	}

	o.Scope = &raw

	return nil
}
