package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PollersGetHandlerFunc turns a function with the right signature into a pollers get handler
type PollersGetHandlerFunc func(PollersGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PollersGetHandlerFunc) Handle(params PollersGetParams) middleware.Responder {
	return fn(params)
}

// PollersGetHandler interface for that can handle valid pollers get params
type PollersGetHandler interface {
	Handle(PollersGetParams) middleware.Responder
}

// NewPollersGet creates a new http.Handler for the pollers get operation
func NewPollersGet(ctx *middleware.Context, handler PollersGetHandler) *PollersGet {
	return &PollersGet{Context: ctx, Handler: handler}
}

/*PollersGet swagger:route GET /pollers /api/2.0 pollersGet

Get a list of all active pollers

Get list of all pollers that are currently running.

*/
type PollersGet struct {
	Context *middleware.Context
	Handler PollersGetHandler
}

func (o *PollersGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPollersGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PollersGetOKBody pollers get o k body
// swagger:model PollersGetOKBody
type PollersGetOKBody interface{}
