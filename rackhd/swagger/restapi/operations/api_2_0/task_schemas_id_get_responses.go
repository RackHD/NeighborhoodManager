package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/swagger/models"
)

/*TaskSchemasIDGetOK Successfully retrieved the task schema

swagger:response taskSchemasIdGetOK
*/
type TaskSchemasIDGetOK struct {

	// In: body
	Payload TaskSchemasIDGetOKBody `json:"body,omitempty"`
}

// NewTaskSchemasIDGetOK creates TaskSchemasIDGetOK with default headers values
func NewTaskSchemasIDGetOK() *TaskSchemasIDGetOK {
	return &TaskSchemasIDGetOK{}
}

// WithPayload adds the payload to the task schemas Id get o k response
func (o *TaskSchemasIDGetOK) WithPayload(payload TaskSchemasIDGetOKBody) *TaskSchemasIDGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task schemas Id get o k response
func (o *TaskSchemasIDGetOK) SetPayload(payload TaskSchemasIDGetOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskSchemasIDGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*TaskSchemasIDGetDefault Error

swagger:response taskSchemasIdGetDefault
*/
type TaskSchemasIDGetDefault struct {
	_statusCode int

	// In: body
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewTaskSchemasIDGetDefault creates TaskSchemasIDGetDefault with default headers values
func NewTaskSchemasIDGetDefault(code int) *TaskSchemasIDGetDefault {
	if code <= 0 {
		code = 500
	}

	return &TaskSchemasIDGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the task schemas Id get default response
func (o *TaskSchemasIDGetDefault) WithStatusCode(code int) *TaskSchemasIDGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the task schemas Id get default response
func (o *TaskSchemasIDGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the task schemas Id get default response
func (o *TaskSchemasIDGetDefault) WithPayload(payload *models.ErrorResponse) *TaskSchemasIDGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the task schemas Id get default response
func (o *TaskSchemasIDGetDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *TaskSchemasIDGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
