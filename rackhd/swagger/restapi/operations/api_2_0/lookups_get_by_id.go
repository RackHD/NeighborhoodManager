package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LookupsGetByIDHandlerFunc turns a function with the right signature into a lookups get by Id handler
type LookupsGetByIDHandlerFunc func(LookupsGetByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LookupsGetByIDHandlerFunc) Handle(params LookupsGetByIDParams) middleware.Responder {
	return fn(params)
}

// LookupsGetByIDHandler interface for that can handle valid lookups get by Id params
type LookupsGetByIDHandler interface {
	Handle(LookupsGetByIDParams) middleware.Responder
}

// NewLookupsGetByID creates a new http.Handler for the lookups get by Id operation
func NewLookupsGetByID(ctx *middleware.Context, handler LookupsGetByIDHandler) *LookupsGetByID {
	return &LookupsGetByID{Context: ctx, Handler: handler}
}

/*LookupsGetByID swagger:route GET /lookups/{id} /api/2.0 lookupsGetById

Get a lookup

Get a lookup by specifying its identifier.

*/
type LookupsGetByID struct {
	Context *middleware.Context
	Handler LookupsGetByIDHandler
}

func (o *LookupsGetByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLookupsGetByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
