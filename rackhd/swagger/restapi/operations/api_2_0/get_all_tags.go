package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllTagsHandlerFunc turns a function with the right signature into a get all tags handler
type GetAllTagsHandlerFunc func(GetAllTagsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllTagsHandlerFunc) Handle(params GetAllTagsParams) middleware.Responder {
	return fn(params)
}

// GetAllTagsHandler interface for that can handle valid get all tags params
type GetAllTagsHandler interface {
	Handle(GetAllTagsParams) middleware.Responder
}

// NewGetAllTags creates a new http.Handler for the get all tags operation
func NewGetAllTags(ctx *middleware.Context, handler GetAllTagsHandler) *GetAllTags {
	return &GetAllTags{Context: ctx, Handler: handler}
}

/*GetAllTags swagger:route GET /tags /api/2.0 getAllTags

Get all tags

Get a list of all tags currently stored.

*/
type GetAllTags struct {
	Context *middleware.Context
	Handler GetAllTagsHandler
}

func (o *GetAllTags) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetAllTagsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
