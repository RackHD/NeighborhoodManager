package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ObmsPostLedHandlerFunc turns a function with the right signature into a obms post led handler
type ObmsPostLedHandlerFunc func(ObmsPostLedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ObmsPostLedHandlerFunc) Handle(params ObmsPostLedParams) middleware.Responder {
	return fn(params)
}

// ObmsPostLedHandler interface for that can handle valid obms post led params
type ObmsPostLedHandler interface {
	Handle(ObmsPostLedParams) middleware.Responder
}

// NewObmsPostLed creates a new http.Handler for the obms post led operation
func NewObmsPostLed(ctx *middleware.Context, handler ObmsPostLedHandler) *ObmsPostLed {
	return &ObmsPostLed{Context: ctx, Handler: handler}
}

/*ObmsPostLed swagger:route POST /obms/led /api/2.0 obmsPostLed

Set identify light status

Enable or disable identify LED on node through OBM, if supported.

*/
type ObmsPostLed struct {
	Context *middleware.Context
	Handler ObmsPostLedHandler
}

func (o *ObmsPostLed) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewObmsPostLedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
