package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/swagger/models"
)

/*NodesPostWorkflowByIDCreated Successfully started the specified workflow

swagger:response nodesPostWorkflowByIdCreated
*/
type NodesPostWorkflowByIDCreated struct {

	// In: body
	Payload NodesPostWorkflowByIDCreatedBody `json:"body,omitempty"`
}

// NewNodesPostWorkflowByIDCreated creates NodesPostWorkflowByIDCreated with default headers values
func NewNodesPostWorkflowByIDCreated() *NodesPostWorkflowByIDCreated {
	return &NodesPostWorkflowByIDCreated{}
}

// WithPayload adds the payload to the nodes post workflow by Id created response
func (o *NodesPostWorkflowByIDCreated) WithPayload(payload NodesPostWorkflowByIDCreatedBody) *NodesPostWorkflowByIDCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes post workflow by Id created response
func (o *NodesPostWorkflowByIDCreated) SetPayload(payload NodesPostWorkflowByIDCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesPostWorkflowByIDCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*NodesPostWorkflowByIDNotFound The specified node was not found

swagger:response nodesPostWorkflowByIdNotFound
*/
type NodesPostWorkflowByIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesPostWorkflowByIDNotFound creates NodesPostWorkflowByIDNotFound with default headers values
func NewNodesPostWorkflowByIDNotFound() *NodesPostWorkflowByIDNotFound {
	return &NodesPostWorkflowByIDNotFound{}
}

// WithPayload adds the payload to the nodes post workflow by Id not found response
func (o *NodesPostWorkflowByIDNotFound) WithPayload(payload *models.Error) *NodesPostWorkflowByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes post workflow by Id not found response
func (o *NodesPostWorkflowByIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesPostWorkflowByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*NodesPostWorkflowByIDDefault Unexpected error

swagger:response nodesPostWorkflowByIdDefault
*/
type NodesPostWorkflowByIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesPostWorkflowByIDDefault creates NodesPostWorkflowByIDDefault with default headers values
func NewNodesPostWorkflowByIDDefault(code int) *NodesPostWorkflowByIDDefault {
	if code <= 0 {
		code = 500
	}

	return &NodesPostWorkflowByIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the nodes post workflow by Id default response
func (o *NodesPostWorkflowByIDDefault) WithStatusCode(code int) *NodesPostWorkflowByIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the nodes post workflow by Id default response
func (o *NodesPostWorkflowByIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the nodes post workflow by Id default response
func (o *NodesPostWorkflowByIDDefault) WithPayload(payload *models.Error) *NodesPostWorkflowByIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes post workflow by Id default response
func (o *NodesPostWorkflowByIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesPostWorkflowByIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
