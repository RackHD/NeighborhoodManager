package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ProfilesPutLibByNameHandlerFunc turns a function with the right signature into a profiles put lib by name handler
type ProfilesPutLibByNameHandlerFunc func(ProfilesPutLibByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProfilesPutLibByNameHandlerFunc) Handle(params ProfilesPutLibByNameParams) middleware.Responder {
	return fn(params)
}

// ProfilesPutLibByNameHandler interface for that can handle valid profiles put lib by name params
type ProfilesPutLibByNameHandler interface {
	Handle(ProfilesPutLibByNameParams) middleware.Responder
}

// NewProfilesPutLibByName creates a new http.Handler for the profiles put lib by name operation
func NewProfilesPutLibByName(ctx *middleware.Context, handler ProfilesPutLibByNameHandler) *ProfilesPutLibByName {
	return &ProfilesPutLibByName{Context: ctx, Handler: handler}
}

/*ProfilesPutLibByName swagger:route PUT /profiles/library/{name} /api/2.0 profilesPutLibByName

Put a profile

Create or modify the specified profile metadata and contents.

*/
type ProfilesPutLibByName struct {
	Context *middleware.Context
	Handler ProfilesPutLibByNameHandler
}

func (o *ProfilesPutLibByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewProfilesPutLibByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ProfilesPutLibByNameCreatedBody profiles put lib by name created body
// swagger:model ProfilesPutLibByNameCreatedBody
type ProfilesPutLibByNameCreatedBody interface{}
