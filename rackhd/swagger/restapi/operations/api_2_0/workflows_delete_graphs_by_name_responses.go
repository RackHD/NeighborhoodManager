package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/swagger/models"
)

/*WorkflowsDeleteGraphsByNameNoContent Successfully deleted the specified workflow graph

swagger:response workflowsDeleteGraphsByNameNoContent
*/
type WorkflowsDeleteGraphsByNameNoContent struct {

	// In: body
	Payload WorkflowsDeleteGraphsByNameNoContentBody `json:"body,omitempty"`
}

// NewWorkflowsDeleteGraphsByNameNoContent creates WorkflowsDeleteGraphsByNameNoContent with default headers values
func NewWorkflowsDeleteGraphsByNameNoContent() *WorkflowsDeleteGraphsByNameNoContent {
	return &WorkflowsDeleteGraphsByNameNoContent{}
}

// WithPayload adds the payload to the workflows delete graphs by name no content response
func (o *WorkflowsDeleteGraphsByNameNoContent) WithPayload(payload WorkflowsDeleteGraphsByNameNoContentBody) *WorkflowsDeleteGraphsByNameNoContent {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete graphs by name no content response
func (o *WorkflowsDeleteGraphsByNameNoContent) SetPayload(payload WorkflowsDeleteGraphsByNameNoContentBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteGraphsByNameNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*WorkflowsDeleteGraphsByNameNotFound The graph with the specified injectable name was not found

swagger:response workflowsDeleteGraphsByNameNotFound
*/
type WorkflowsDeleteGraphsByNameNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewWorkflowsDeleteGraphsByNameNotFound creates WorkflowsDeleteGraphsByNameNotFound with default headers values
func NewWorkflowsDeleteGraphsByNameNotFound() *WorkflowsDeleteGraphsByNameNotFound {
	return &WorkflowsDeleteGraphsByNameNotFound{}
}

// WithPayload adds the payload to the workflows delete graphs by name not found response
func (o *WorkflowsDeleteGraphsByNameNotFound) WithPayload(payload *models.Error) *WorkflowsDeleteGraphsByNameNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete graphs by name not found response
func (o *WorkflowsDeleteGraphsByNameNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteGraphsByNameNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*WorkflowsDeleteGraphsByNameDefault Unexpected error

swagger:response workflowsDeleteGraphsByNameDefault
*/
type WorkflowsDeleteGraphsByNameDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewWorkflowsDeleteGraphsByNameDefault creates WorkflowsDeleteGraphsByNameDefault with default headers values
func NewWorkflowsDeleteGraphsByNameDefault(code int) *WorkflowsDeleteGraphsByNameDefault {
	if code <= 0 {
		code = 500
	}

	return &WorkflowsDeleteGraphsByNameDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the workflows delete graphs by name default response
func (o *WorkflowsDeleteGraphsByNameDefault) WithStatusCode(code int) *WorkflowsDeleteGraphsByNameDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the workflows delete graphs by name default response
func (o *WorkflowsDeleteGraphsByNameDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the workflows delete graphs by name default response
func (o *WorkflowsDeleteGraphsByNameDefault) WithPayload(payload *models.Error) *WorkflowsDeleteGraphsByNameDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete graphs by name default response
func (o *WorkflowsDeleteGraphsByNameDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteGraphsByNameDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
