package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesPostWorkflowByIDHandlerFunc turns a function with the right signature into a nodes post workflow by Id handler
type NodesPostWorkflowByIDHandlerFunc func(NodesPostWorkflowByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesPostWorkflowByIDHandlerFunc) Handle(params NodesPostWorkflowByIDParams) middleware.Responder {
	return fn(params)
}

// NodesPostWorkflowByIDHandler interface for that can handle valid nodes post workflow by Id params
type NodesPostWorkflowByIDHandler interface {
	Handle(NodesPostWorkflowByIDParams) middleware.Responder
}

// NewNodesPostWorkflowByID creates a new http.Handler for the nodes post workflow by Id operation
func NewNodesPostWorkflowByID(ctx *middleware.Context, handler NodesPostWorkflowByIDHandler) *NodesPostWorkflowByID {
	return &NodesPostWorkflowByID{Context: ctx, Handler: handler}
}

/*NodesPostWorkflowByID swagger:route POST /nodes/{identifier}/workflows /api/2.0 nodesPostWorkflowById

Post workflow for the node

Run a workflow against for the specified node.

*/
type NodesPostWorkflowByID struct {
	Context *middleware.Context
	Handler NodesPostWorkflowByIDHandler
}

func (o *NodesPostWorkflowByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesPostWorkflowByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// NodesPostWorkflowByIDCreatedBody nodes post workflow by ID created body
// swagger:model NodesPostWorkflowByIDCreatedBody
type NodesPostWorkflowByIDCreatedBody interface{}
