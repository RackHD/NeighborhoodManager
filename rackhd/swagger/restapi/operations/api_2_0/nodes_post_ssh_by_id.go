package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesPostSSHByIDHandlerFunc turns a function with the right signature into a nodes post Ssh by Id handler
type NodesPostSSHByIDHandlerFunc func(NodesPostSSHByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesPostSSHByIDHandlerFunc) Handle(params NodesPostSSHByIDParams) middleware.Responder {
	return fn(params)
}

// NodesPostSSHByIDHandler interface for that can handle valid nodes post Ssh by Id params
type NodesPostSSHByIDHandler interface {
	Handle(NodesPostSSHByIDParams) middleware.Responder
}

// NewNodesPostSSHByID creates a new http.Handler for the nodes post Ssh by Id operation
func NewNodesPostSSHByID(ctx *middleware.Context, handler NodesPostSSHByIDHandler) *NodesPostSSHByID {
	return &NodesPostSSHByID{Context: ctx, Handler: handler}
}

/*NodesPostSSHByID swagger:route POST /nodes/{identifier}/ssh /api/2.0 nodesPostSshById

Post ssh settings

Create the ssh settings associated with a node.

*/
type NodesPostSSHByID struct {
	Context *middleware.Context
	Handler NodesPostSSHByIDHandler
}

func (o *NodesPostSSHByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesPostSSHByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
