package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesPatchByIDHandlerFunc turns a function with the right signature into a nodes patch by Id handler
type NodesPatchByIDHandlerFunc func(NodesPatchByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesPatchByIDHandlerFunc) Handle(params NodesPatchByIDParams) middleware.Responder {
	return fn(params)
}

// NodesPatchByIDHandler interface for that can handle valid nodes patch by Id params
type NodesPatchByIDHandler interface {
	Handle(NodesPatchByIDParams) middleware.Responder
}

// NewNodesPatchByID creates a new http.Handler for the nodes patch by Id operation
func NewNodesPatchByID(ctx *middleware.Context, handler NodesPatchByIDHandler) *NodesPatchByID {
	return &NodesPatchByID{Context: ctx, Handler: handler}
}

/*NodesPatchByID swagger:route PATCH /nodes/{identifier} /api/2.0 nodesPatchById

Patch a node

Modify the properties of the specified node.

*/
type NodesPatchByID struct {
	Context *middleware.Context
	Handler NodesPatchByIDHandler
}

func (o *NodesPatchByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesPatchByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// NodesPatchByIDOKBody nodes patch by ID o k body
// swagger:model NodesPatchByIDOKBody
type NodesPatchByIDOKBody interface{}
