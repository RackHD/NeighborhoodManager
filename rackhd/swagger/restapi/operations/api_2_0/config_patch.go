package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ConfigPatchHandlerFunc turns a function with the right signature into a config patch handler
type ConfigPatchHandlerFunc func(ConfigPatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConfigPatchHandlerFunc) Handle(params ConfigPatchParams) middleware.Responder {
	return fn(params)
}

// ConfigPatchHandler interface for that can handle valid config patch params
type ConfigPatchHandler interface {
	Handle(ConfigPatchParams) middleware.Responder
}

// NewConfigPatch creates a new http.Handler for the config patch operation
func NewConfigPatch(ctx *middleware.Context, handler ConfigPatchHandler) *ConfigPatch {
	return &ConfigPatch{Context: ctx, Handler: handler}
}

/*ConfigPatch swagger:route PATCH /config /api/2.0 configPatch

Patch server configuration

Modify the RackHD server configuration.

*/
type ConfigPatch struct {
	Context *middleware.Context
	Handler ConfigPatchHandler
}

func (o *ConfigPatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewConfigPatchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ConfigPatchOKBody config patch o k body
// swagger:model ConfigPatchOKBody
type ConfigPatchOKBody interface{}
