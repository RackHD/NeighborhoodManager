package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SchemasGetHandlerFunc turns a function with the right signature into a schemas get handler
type SchemasGetHandlerFunc func(SchemasGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SchemasGetHandlerFunc) Handle(params SchemasGetParams) middleware.Responder {
	return fn(params)
}

// SchemasGetHandler interface for that can handle valid schemas get params
type SchemasGetHandler interface {
	Handle(SchemasGetParams) middleware.Responder
}

// NewSchemasGet creates a new http.Handler for the schemas get operation
func NewSchemasGet(ctx *middleware.Context, handler SchemasGetHandler) *SchemasGet {
	return &SchemasGet{Context: ctx, Handler: handler}
}

/*SchemasGet swagger:route GET /schemas /api/2.0 schemasGet

Get all schemas

Get a list of all schemas currently stored in the system.

*/
type SchemasGet struct {
	Context *middleware.Context
	Handler SchemasGetHandler
}

func (o *SchemasGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewSchemasGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SchemasGetOKBody schemas get o k body
// swagger:model SchemasGetOKBody
type SchemasGetOKBody interface{}
