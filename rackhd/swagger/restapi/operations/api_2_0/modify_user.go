package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ModifyUserHandlerFunc turns a function with the right signature into a modify user handler
type ModifyUserHandlerFunc func(ModifyUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ModifyUserHandlerFunc) Handle(params ModifyUserParams) middleware.Responder {
	return fn(params)
}

// ModifyUserHandler interface for that can handle valid modify user params
type ModifyUserHandler interface {
	Handle(ModifyUserParams) middleware.Responder
}

// NewModifyUser creates a new http.Handler for the modify user operation
func NewModifyUser(ctx *middleware.Context, handler ModifyUserHandler) *ModifyUser {
	return &ModifyUser{Context: ctx, Handler: handler}
}

/*ModifyUser swagger:route PATCH /users/{name} /api/2.0 modifyUser

Patch a user

Modify the properties of a user.

*/
type ModifyUser struct {
	Context *middleware.Context
	Handler ModifyUserHandler
}

func (o *ModifyUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewModifyUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ModifyUserOKBody modify user o k body
// swagger:model ModifyUserOKBody
type ModifyUserOKBody interface{}

// ModifyUserUnauthorizedBody modify user unauthorized body
// swagger:model ModifyUserUnauthorizedBody
type ModifyUserUnauthorizedBody interface{}

// ModifyUserForbiddenBody modify user forbidden body
// swagger:model ModifyUserForbiddenBody
type ModifyUserForbiddenBody interface{}
