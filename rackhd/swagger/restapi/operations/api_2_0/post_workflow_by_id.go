package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostWorkflowByIDHandlerFunc turns a function with the right signature into a post workflow by Id handler
type PostWorkflowByIDHandlerFunc func(PostWorkflowByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostWorkflowByIDHandlerFunc) Handle(params PostWorkflowByIDParams) middleware.Responder {
	return fn(params)
}

// PostWorkflowByIDHandler interface for that can handle valid post workflow by Id params
type PostWorkflowByIDHandler interface {
	Handle(PostWorkflowByIDParams) middleware.Responder
}

// NewPostWorkflowByID creates a new http.Handler for the post workflow by Id operation
func NewPostWorkflowByID(ctx *middleware.Context, handler PostWorkflowByIDHandler) *PostWorkflowByID {
	return &PostWorkflowByID{Context: ctx, Handler: handler}
}

/*PostWorkflowByID swagger:route POST /tags/{tagName}/nodes/workflows /api/2.0 postWorkflowById

Post workflow to node by tag

Start a workflow against all nodes with the specified tag.

*/
type PostWorkflowByID struct {
	Context *middleware.Context
	Handler PostWorkflowByIDHandler
}

func (o *PostWorkflowByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostWorkflowByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostWorkflowByIDAcceptedBody post workflow by ID accepted body
// swagger:model PostWorkflowByIDAcceptedBody
type PostWorkflowByIDAcceptedBody interface{}
