package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/swagger/models"
)

/*WorkflowsDeleteByInstanceIDNoContent Successfully deleted the specified workflow

swagger:response workflowsDeleteByInstanceIdNoContent
*/
type WorkflowsDeleteByInstanceIDNoContent struct {

	// In: body
	Payload WorkflowsDeleteByInstanceIDNoContentBody `json:"body,omitempty"`
}

// NewWorkflowsDeleteByInstanceIDNoContent creates WorkflowsDeleteByInstanceIDNoContent with default headers values
func NewWorkflowsDeleteByInstanceIDNoContent() *WorkflowsDeleteByInstanceIDNoContent {
	return &WorkflowsDeleteByInstanceIDNoContent{}
}

// WithPayload adds the payload to the workflows delete by instance Id no content response
func (o *WorkflowsDeleteByInstanceIDNoContent) WithPayload(payload WorkflowsDeleteByInstanceIDNoContentBody) *WorkflowsDeleteByInstanceIDNoContent {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete by instance Id no content response
func (o *WorkflowsDeleteByInstanceIDNoContent) SetPayload(payload WorkflowsDeleteByInstanceIDNoContentBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteByInstanceIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*WorkflowsDeleteByInstanceIDNotFound The specified workflow was not found

swagger:response workflowsDeleteByInstanceIdNotFound
*/
type WorkflowsDeleteByInstanceIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewWorkflowsDeleteByInstanceIDNotFound creates WorkflowsDeleteByInstanceIDNotFound with default headers values
func NewWorkflowsDeleteByInstanceIDNotFound() *WorkflowsDeleteByInstanceIDNotFound {
	return &WorkflowsDeleteByInstanceIDNotFound{}
}

// WithPayload adds the payload to the workflows delete by instance Id not found response
func (o *WorkflowsDeleteByInstanceIDNotFound) WithPayload(payload *models.Error) *WorkflowsDeleteByInstanceIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete by instance Id not found response
func (o *WorkflowsDeleteByInstanceIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteByInstanceIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*WorkflowsDeleteByInstanceIDDefault Unexpected error

swagger:response workflowsDeleteByInstanceIdDefault
*/
type WorkflowsDeleteByInstanceIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewWorkflowsDeleteByInstanceIDDefault creates WorkflowsDeleteByInstanceIDDefault with default headers values
func NewWorkflowsDeleteByInstanceIDDefault(code int) *WorkflowsDeleteByInstanceIDDefault {
	if code <= 0 {
		code = 500
	}

	return &WorkflowsDeleteByInstanceIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the workflows delete by instance Id default response
func (o *WorkflowsDeleteByInstanceIDDefault) WithStatusCode(code int) *WorkflowsDeleteByInstanceIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the workflows delete by instance Id default response
func (o *WorkflowsDeleteByInstanceIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the workflows delete by instance Id default response
func (o *WorkflowsDeleteByInstanceIDDefault) WithPayload(payload *models.Error) *WorkflowsDeleteByInstanceIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the workflows delete by instance Id default response
func (o *WorkflowsDeleteByInstanceIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *WorkflowsDeleteByInstanceIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
