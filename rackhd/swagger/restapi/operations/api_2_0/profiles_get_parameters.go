package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewProfilesGetParams creates a new ProfilesGetParams object
// with the default values initialized.
func NewProfilesGetParams() ProfilesGetParams {
	var ()
	return ProfilesGetParams{}
}

// ProfilesGetParams contains all the bound params for the profiles get operation
// typically these are obtained from a http.Request
//
// swagger:parameters profilesGet
type ProfilesGetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*When macs parameters is not passed, passed with MAC adds IP address to lookup
	  In: query
	*/
	IP *string
	/*List of IP addresses to lookup
	  In: query
	  Collection Format: multi
	*/
	Ips []string
	/*When macs parameter is not passed, passed with IP adds MAC address to lookup
	  In: query
	*/
	Mac *string
	/*List of valid MAC addresses to lookup
	  In: query
	  Collection Format: multi
	*/
	Macs []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ProfilesGetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qIP, qhkIP, _ := qs.GetOK("ip")
	if err := o.bindIP(qIP, qhkIP, route.Formats); err != nil {
		res = append(res, err)
	}

	qIps, qhkIps, _ := qs.GetOK("ips")
	if err := o.bindIps(qIps, qhkIps, route.Formats); err != nil {
		res = append(res, err)
	}

	qMac, qhkMac, _ := qs.GetOK("mac")
	if err := o.bindMac(qMac, qhkMac, route.Formats); err != nil {
		res = append(res, err)
	}

	qMacs, qhkMacs, _ := qs.GetOK("macs")
	if err := o.bindMacs(qMacs, qhkMacs, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ProfilesGetParams) bindIP(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.IP = &raw

	return nil
}

func (o *ProfilesGetParams) bindIps(rawData []string, hasKey bool, formats strfmt.Registry) error {

	raw := rawData
	size := len(raw)

	if size == 0 {
		return nil
	}

	ic := raw
	isz := size
	var ir []string
	iValidateElement := func(i int, ipsI string) *errors.Validation {

		return nil
	}

	for i := 0; i < isz; i++ {

		if err := iValidateElement(i, ic[i]); err != nil {
			return err
		}
		ir = append(ir, ic[i])
	}

	o.Ips = ir

	return nil
}

func (o *ProfilesGetParams) bindMac(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Mac = &raw

	return nil
}

func (o *ProfilesGetParams) bindMacs(rawData []string, hasKey bool, formats strfmt.Registry) error {

	raw := rawData
	size := len(raw)

	if size == 0 {
		return nil
	}

	ic := raw
	isz := size
	var ir []string
	iValidateElement := func(i int, macsI string) *errors.Validation {

		return nil
	}

	for i := 0; i < isz; i++ {

		if err := iValidateElement(i, ic[i]); err != nil {
			return err
		}
		ir = append(ir, ic[i])
	}

	o.Macs = ir

	return nil
}
