package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesDelTagByIDHandlerFunc turns a function with the right signature into a nodes del tag by Id handler
type NodesDelTagByIDHandlerFunc func(NodesDelTagByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesDelTagByIDHandlerFunc) Handle(params NodesDelTagByIDParams) middleware.Responder {
	return fn(params)
}

// NodesDelTagByIDHandler interface for that can handle valid nodes del tag by Id params
type NodesDelTagByIDHandler interface {
	Handle(NodesDelTagByIDParams) middleware.Responder
}

// NewNodesDelTagByID creates a new http.Handler for the nodes del tag by Id operation
func NewNodesDelTagByID(ctx *middleware.Context, handler NodesDelTagByIDHandler) *NodesDelTagByID {
	return &NodesDelTagByID{Context: ctx, Handler: handler}
}

/*NodesDelTagByID swagger:route DELETE /nodes/{identifier}/tags/{tagName} /api/2.0 nodesDelTagById

Delete a tag from node

Delete a tag from the specified node.

*/
type NodesDelTagByID struct {
	Context *middleware.Context
	Handler NodesDelTagByIDHandler
}

func (o *NodesDelTagByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesDelTagByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
