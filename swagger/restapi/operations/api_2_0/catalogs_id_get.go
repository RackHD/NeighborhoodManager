package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CatalogsIDGetHandlerFunc turns a function with the right signature into a catalogs Id get handler
type CatalogsIDGetHandlerFunc func(CatalogsIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CatalogsIDGetHandlerFunc) Handle(params CatalogsIDGetParams) middleware.Responder {
	return fn(params)
}

// CatalogsIDGetHandler interface for that can handle valid catalogs Id get params
type CatalogsIDGetHandler interface {
	Handle(CatalogsIDGetParams) middleware.Responder
}

// NewCatalogsIDGet creates a new http.Handler for the catalogs Id get operation
func NewCatalogsIDGet(ctx *middleware.Context, handler CatalogsIDGetHandler) *CatalogsIDGet {
	return &CatalogsIDGet{Context: ctx, Handler: handler}
}

/*CatalogsIDGet swagger:route GET /catalogs/{identifier} /api/2.0 catalogsIdGet

Get a catalog

Get a catalog based on its catalog identifier.

*/
type CatalogsIDGet struct {
	Context *middleware.Context
	Handler CatalogsIDGetHandler
}

func (o *CatalogsIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCatalogsIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
