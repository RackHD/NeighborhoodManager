package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TemplatesLibDeleteHandlerFunc turns a function with the right signature into a templates lib delete handler
type TemplatesLibDeleteHandlerFunc func(TemplatesLibDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TemplatesLibDeleteHandlerFunc) Handle(params TemplatesLibDeleteParams) middleware.Responder {
	return fn(params)
}

// TemplatesLibDeleteHandler interface for that can handle valid templates lib delete params
type TemplatesLibDeleteHandler interface {
	Handle(TemplatesLibDeleteParams) middleware.Responder
}

// NewTemplatesLibDelete creates a new http.Handler for the templates lib delete operation
func NewTemplatesLibDelete(ctx *middleware.Context, handler TemplatesLibDeleteHandler) *TemplatesLibDelete {
	return &TemplatesLibDelete{Context: ctx, Handler: handler}
}

/*TemplatesLibDelete swagger:route DELETE /templates/library/{name} /api/2.0 templatesLibDelete

Delete a single template

Delete the template with the specified name.

*/
type TemplatesLibDelete struct {
	Context *middleware.Context
	Handler TemplatesLibDeleteHandler
}

func (o *TemplatesLibDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTemplatesLibDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
