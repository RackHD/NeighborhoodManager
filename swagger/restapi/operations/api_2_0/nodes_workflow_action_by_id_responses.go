package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/RackHD/neighborhood-manager/swagger/models"
)

/*NodesWorkflowActionByIDAccepted Successfully performed the action on the specified workflow

swagger:response nodesWorkflowActionByIdAccepted
*/
type NodesWorkflowActionByIDAccepted struct {

	// In: body
	Payload NodesWorkflowActionByIDAcceptedBody `json:"body,omitempty"`
}

// NewNodesWorkflowActionByIDAccepted creates NodesWorkflowActionByIDAccepted with default headers values
func NewNodesWorkflowActionByIDAccepted() *NodesWorkflowActionByIDAccepted {
	return &NodesWorkflowActionByIDAccepted{}
}

// WithPayload adds the payload to the nodes workflow action by Id accepted response
func (o *NodesWorkflowActionByIDAccepted) WithPayload(payload NodesWorkflowActionByIDAcceptedBody) *NodesWorkflowActionByIDAccepted {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes workflow action by Id accepted response
func (o *NodesWorkflowActionByIDAccepted) SetPayload(payload NodesWorkflowActionByIDAcceptedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesWorkflowActionByIDAccepted) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(202)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*NodesWorkflowActionByIDNotFound The node with the identifier was not found

swagger:response nodesWorkflowActionByIdNotFound
*/
type NodesWorkflowActionByIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesWorkflowActionByIDNotFound creates NodesWorkflowActionByIDNotFound with default headers values
func NewNodesWorkflowActionByIDNotFound() *NodesWorkflowActionByIDNotFound {
	return &NodesWorkflowActionByIDNotFound{}
}

// WithPayload adds the payload to the nodes workflow action by Id not found response
func (o *NodesWorkflowActionByIDNotFound) WithPayload(payload *models.Error) *NodesWorkflowActionByIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes workflow action by Id not found response
func (o *NodesWorkflowActionByIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesWorkflowActionByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*NodesWorkflowActionByIDDefault Unexpected error

swagger:response nodesWorkflowActionByIdDefault
*/
type NodesWorkflowActionByIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewNodesWorkflowActionByIDDefault creates NodesWorkflowActionByIDDefault with default headers values
func NewNodesWorkflowActionByIDDefault(code int) *NodesWorkflowActionByIDDefault {
	if code <= 0 {
		code = 500
	}

	return &NodesWorkflowActionByIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the nodes workflow action by Id default response
func (o *NodesWorkflowActionByIDDefault) WithStatusCode(code int) *NodesWorkflowActionByIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the nodes workflow action by Id default response
func (o *NodesWorkflowActionByIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the nodes workflow action by Id default response
func (o *NodesWorkflowActionByIDDefault) WithPayload(payload *models.Error) *NodesWorkflowActionByIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the nodes workflow action by Id default response
func (o *NodesWorkflowActionByIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *NodesWorkflowActionByIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
