package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesPatchTagByIDHandlerFunc turns a function with the right signature into a nodes patch tag by Id handler
type NodesPatchTagByIDHandlerFunc func(NodesPatchTagByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesPatchTagByIDHandlerFunc) Handle(params NodesPatchTagByIDParams) middleware.Responder {
	return fn(params)
}

// NodesPatchTagByIDHandler interface for that can handle valid nodes patch tag by Id params
type NodesPatchTagByIDHandler interface {
	Handle(NodesPatchTagByIDParams) middleware.Responder
}

// NewNodesPatchTagByID creates a new http.Handler for the nodes patch tag by Id operation
func NewNodesPatchTagByID(ctx *middleware.Context, handler NodesPatchTagByIDHandler) *NodesPatchTagByID {
	return &NodesPatchTagByID{Context: ctx, Handler: handler}
}

/*NodesPatchTagByID swagger:route PATCH /nodes/{identifier}/tags /api/2.0 nodesPatchTagById

Patch node tags

Modify the tags associated with a node.

*/
type NodesPatchTagByID struct {
	Context *middleware.Context
	Handler NodesPatchTagByIDHandler
}

func (o *NodesPatchTagByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesPatchTagByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// NodesPatchTagByIDOKBody nodes patch tag by ID o k body
// swagger:model NodesPatchTagByIDOKBody
type NodesPatchTagByIDOKBody interface{}
