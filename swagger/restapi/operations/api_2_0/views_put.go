package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ViewsPutHandlerFunc turns a function with the right signature into a views put handler
type ViewsPutHandlerFunc func(ViewsPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ViewsPutHandlerFunc) Handle(params ViewsPutParams) middleware.Responder {
	return fn(params)
}

// ViewsPutHandler interface for that can handle valid views put params
type ViewsPutHandler interface {
	Handle(ViewsPutParams) middleware.Responder
}

// NewViewsPut creates a new http.Handler for the views put operation
func NewViewsPut(ctx *middleware.Context, handler ViewsPutHandler) *ViewsPut {
	return &ViewsPut{Context: ctx, Handler: handler}
}

/*ViewsPut swagger:route PUT /views/{identifier} /api/2.0 viewsPut

Put a specific view

Create or update a view with the specified name.

*/
type ViewsPut struct {
	Context *middleware.Context
	Handler ViewsPutHandler
}

func (o *ViewsPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewViewsPutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ViewsPutCreatedBody views put created body
// swagger:model ViewsPutCreatedBody
type ViewsPutCreatedBody interface{}
