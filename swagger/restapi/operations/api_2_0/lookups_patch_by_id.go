package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// LookupsPatchByIDHandlerFunc turns a function with the right signature into a lookups patch by Id handler
type LookupsPatchByIDHandlerFunc func(LookupsPatchByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn LookupsPatchByIDHandlerFunc) Handle(params LookupsPatchByIDParams) middleware.Responder {
	return fn(params)
}

// LookupsPatchByIDHandler interface for that can handle valid lookups patch by Id params
type LookupsPatchByIDHandler interface {
	Handle(LookupsPatchByIDParams) middleware.Responder
}

// NewLookupsPatchByID creates a new http.Handler for the lookups patch by Id operation
func NewLookupsPatchByID(ctx *middleware.Context, handler LookupsPatchByIDHandler) *LookupsPatchByID {
	return &LookupsPatchByID{Context: ctx, Handler: handler}
}

/*LookupsPatchByID swagger:route PATCH /lookups/{id} /api/2.0 lookupsPatchById

Patch a lookup

Modify the properties of a lookup.

*/
type LookupsPatchByID struct {
	Context *middleware.Context
	Handler LookupsPatchByIDHandler
}

func (o *LookupsPatchByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewLookupsPatchByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// LookupsPatchByIDOKBody lookups patch by ID o k body
// swagger:model LookupsPatchByIDOKBody
type LookupsPatchByIDOKBody interface{}
