package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// NodesGetAllHandlerFunc turns a function with the right signature into a nodes get all handler
type NodesGetAllHandlerFunc func(NodesGetAllParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NodesGetAllHandlerFunc) Handle(params NodesGetAllParams) middleware.Responder {
	return fn(params)
}

// NodesGetAllHandler interface for that can handle valid nodes get all params
type NodesGetAllHandler interface {
	Handle(NodesGetAllParams) middleware.Responder
}

// NewNodesGetAll creates a new http.Handler for the nodes get all operation
func NewNodesGetAll(ctx *middleware.Context, handler NodesGetAllHandler) *NodesGetAll {
	return &NodesGetAll{Context: ctx, Handler: handler}
}

/*NodesGetAll swagger:route GET /nodes /api/2.0 nodesGetAll

Get a list of nodes

Get a list of all currently stored nodes.

*/
type NodesGetAll struct {
	Context *middleware.Context
	Handler NodesGetAllHandler
}

func (o *NodesGetAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewNodesGetAllParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
