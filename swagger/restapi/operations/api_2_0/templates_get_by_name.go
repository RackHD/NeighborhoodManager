package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// TemplatesGetByNameHandlerFunc turns a function with the right signature into a templates get by name handler
type TemplatesGetByNameHandlerFunc func(TemplatesGetByNameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TemplatesGetByNameHandlerFunc) Handle(params TemplatesGetByNameParams) middleware.Responder {
	return fn(params)
}

// TemplatesGetByNameHandler interface for that can handle valid templates get by name params
type TemplatesGetByNameHandler interface {
	Handle(TemplatesGetByNameParams) middleware.Responder
}

// NewTemplatesGetByName creates a new http.Handler for the templates get by name operation
func NewTemplatesGetByName(ctx *middleware.Context, handler TemplatesGetByNameHandler) *TemplatesGetByName {
	return &TemplatesGetByName{Context: ctx, Handler: handler}
}

/*TemplatesGetByName swagger:route GET /templates/{name} /api/2.0 templatesGetByName

Get a single template

Get the template with the specified name.

*/
type TemplatesGetByName struct {
	Context *middleware.Context
	Handler TemplatesGetByNameHandler
}

func (o *TemplatesGetByName) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewTemplatesGetByNameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// TemplatesGetByNameOKBody templates get by name o k body
// swagger:model TemplatesGetByNameOKBody
type TemplatesGetByNameOKBody interface{}
