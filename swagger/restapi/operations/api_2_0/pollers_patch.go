package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PollersPatchHandlerFunc turns a function with the right signature into a pollers patch handler
type PollersPatchHandlerFunc func(PollersPatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PollersPatchHandlerFunc) Handle(params PollersPatchParams) middleware.Responder {
	return fn(params)
}

// PollersPatchHandler interface for that can handle valid pollers patch params
type PollersPatchHandler interface {
	Handle(PollersPatchParams) middleware.Responder
}

// NewPollersPatch creates a new http.Handler for the pollers patch operation
func NewPollersPatch(ctx *middleware.Context, handler PollersPatchHandler) *PollersPatch {
	return &PollersPatch{Context: ctx, Handler: handler}
}

/*PollersPatch swagger:route PATCH /pollers/{identifier} /api/2.0 pollersPatch

Patch a poller

Modify one or more properties of the poller with the specified identifier.

*/
type PollersPatch struct {
	Context *middleware.Context
	Handler PollersPatchHandler
}

func (o *PollersPatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPollersPatchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PollersPatchOKBody pollers patch o k body
// swagger:model PollersPatchOKBody
type PollersPatchOKBody interface{}
