package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/RackHD/neighborhood-manager/swagger/models"
)

// NewObmsPostLedParams creates a new ObmsPostLedParams object
// with the default values initialized.
func NewObmsPostLedParams() ObmsPostLedParams {
	var ()
	return ObmsPostLedParams{}
}

// ObmsPostLedParams contains all the bound params for the obms post led operation
// typically these are obtained from a http.Request
//
// swagger:parameters obmsPostLed
type ObmsPostLedParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*If the body contains the property value: true, the LED will be lit. If the value property does not exist, the LED will be turned off. The body must contain the property nodeId set to the correct node identifier.

	  Required: true
	  In: body
	*/
	Body *models.ObmLed
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ObmsPostLedParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ObmLed
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("body", "body"))
			} else {
				res = append(res, errors.NewParseError("body", "body", "", err))
			}

		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}

	} else {
		res = append(res, errors.Required("body", "body"))
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
