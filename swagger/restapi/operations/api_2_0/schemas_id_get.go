package api_2_0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SchemasIDGetHandlerFunc turns a function with the right signature into a schemas Id get handler
type SchemasIDGetHandlerFunc func(SchemasIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SchemasIDGetHandlerFunc) Handle(params SchemasIDGetParams) middleware.Responder {
	return fn(params)
}

// SchemasIDGetHandler interface for that can handle valid schemas Id get params
type SchemasIDGetHandler interface {
	Handle(SchemasIDGetParams) middleware.Responder
}

// NewSchemasIDGet creates a new http.Handler for the schemas Id get operation
func NewSchemasIDGet(ctx *middleware.Context, handler SchemasIDGetHandler) *SchemasIDGet {
	return &SchemasIDGet{Context: ctx, Handler: handler}
}

/*SchemasIDGet swagger:route GET /schemas/{identifier} /api/2.0 schemasIdGet

Get a schema

Get the specified schema.

*/
type SchemasIDGet struct {
	Context *middleware.Context
	Handler SchemasIDGetHandler
}

func (o *SchemasIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewSchemasIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SchemasIDGetOKBody schemas ID get o k body
// swagger:model SchemasIDGetOKBody
type SchemasIDGetOKBody interface{}
